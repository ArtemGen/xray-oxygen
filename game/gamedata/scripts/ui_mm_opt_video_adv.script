--[[
r1		= 0
r2a		= 1
r2		= 2
r2.5	= 3
r3		= 4
r4		= 5
Команда називається r_ssao. Для DX10 і DX11 потрібно додати нову опцію - st_opt_ultra, але лише коли r_ssao_mode==hdao.
]]
class "opt_video_adv" (CUIWindow)
function opt_video_adv:__init() super()
end

function opt_video_adv:__finalize()
end

function all_modes(render_id)
	return true
end

function opt_video_adv:InitControls(x, y, xml, handler)
	local ctl
    local _st

	self:SetWndPos(vector2():set(x,y))
	self:SetWndSize(vector2():set(738,416))
	self:SetAutoDelete(true)

	self.scroll_v = xml:InitScrollView("video_adv:scroll_v", self)
    handler.scroll_v = self.scroll_v

	-- Дальность видимости
	_st = xml:InitStatic("video_adv:templ_item", nil)
	xml:InitStatic("video_adv:cap_vis_dist", _st)
	xml:InitTrackBar("video_adv:track_vis_dist", _st)
	table.insert(handler.m_preconditions, {func=all_modes, control=_st})

	-- FOV
	_st = xml:InitStatic("video_adv:templ_item", nil)
	xml:InitStatic("video_adv:cap_fov", _st)
	xml:InitTrackBar("video_adv:track_fov", _st)
	table.insert(handler.m_preconditions, {func=all_modes, control=_st})
	
	-- HudFOV
	_st = xml:InitStatic("video_adv:templ_item", nil)
	xml:InitStatic("video_adv:cap_hud_fov", _st)
	xml:InitTrackBar("video_adv:track_hud_fov", _st)
	table.insert(handler.m_preconditions, {func=all_modes, control=_st})
	
	-- Moution Blur (on/off)
	_st = xml:InitStatic("video_adv:templ_item", nil)
	xml:InitStatic("video_adv:cap_mblur_enabled", _st)
	ctl = xml:InitCheck("video_adv:check_mblur_enabled", _st)
	xml:InitTrackBar("video_adv:track_mblur", _st)
	table.insert(handler.m_preconditions, {func=all_modes, control=_st})
	
	-- Детализация объектов
	_st	= xml:InitStatic("video_adv:templ_item", nil)
	xml:InitStatic("video_adv:cap_geometry_lod", _st)
	xml:InitTrackBar("video_adv:track_geometry_lod", _st)
	table.insert(handler.m_preconditions, {func=all_modes, control=_st})

	-- Качество текстур
	_st	= xml:InitStatic("video_adv:templ_item", nil)
	xml:InitStatic("video_adv:cap_texture_lod",	_st)
	ctl = xml:InitTrackBar("video_adv:track_texture_lod", _st)
	handler.texture_lod_track = ctl
	table.insert(handler.m_preconditions, {func=all_modes, control=_st})

	-- Фильтрация текстур
	_st = xml:InitStatic("video_adv:templ_item", nil)
	xml:InitStatic("video_adv:cap_aniso", _st)
	xml:InitTrackBar("video_adv:track_aniso", _st)
	table.insert(handler.m_preconditions, {func=all_modes, control=_st})

	-- Плотность травы
	_st = xml:InitStatic("video_adv:templ_item", nil)
	xml:InitStatic("video_adv:cap_detail_density", _st)
	xml:InitTrackBar("video_adv:track_detail_density", _st)
	table.insert(handler.m_preconditions, {func=all_modes, control=_st})
	
	-- Радиус травы
	_st = xml:InitStatic("video_adv:templ_item", nil)
	xml:InitStatic("video_adv:cap_detail_radius", _st)
	xml:InitTrackBar("video_adv:track_detail_radius", _st)
	table.insert(handler.m_preconditions, {func=all_modes, control=_st})
	
	-- Дальность освещения
	_st = xml:InitStatic("video_adv:templ_item", nil)
	xml:InitStatic("video_adv:cap_light_distance", _st)
	ctl = xml:InitTrackBar("video_adv:track_light_distance", _st)
	table.insert(handler.m_preconditions, {func=all_modes, control=_st})
	
	-- DoF
	_st = xml:InitStatic("video_adv:templ_item", nil)
	xml:InitStatic("video_adv:cap_dof", _st)
	ctl = xml:InitComboBox("video_adv:combo_dof", _st)
	table.insert(handler.m_preconditions, {func=all_modes, control=_st})
	
	-- MSAA
	_st = xml:InitStatic("video_adv:templ_item", nil)
	xml:InitStatic("video_adv:cap_msaa", _st)
	ctl = xml:InitComboBox("video_adv:combo_msaa", _st)
	table.insert(handler.m_preconditions, {func=all_modes, control=_st})

	-- Доп. сглаживание
	_st = xml:InitStatic("video_adv:templ_item", nil)
	xml:InitStatic("video_adv:cap_aa_mode", _st)
	ctl = xml:InitComboBox("video_adv:combo_aa_mode", _st)
	table.insert(handler.m_preconditions, {func=all_modes, control=_st})
	
	-- Качество доп. сглаживания
	_st = xml:InitStatic("video_adv:templ_item", nil)
	xml:InitStatic("video_adv:cap_aa_quality", _st)
	ctl = xml:InitComboBox("video_adv:combo_aa_quality", _st)
	table.insert(handler.m_preconditions, {func=all_modes, control=_st})
	
	-- 60 ГГЦ
	_st = xml:InitStatic("video_adv:templ_item", nil)
	xml:InitStatic("video_adv:cap_60hz", _st)
	ctl = xml:InitComboBox("video_adv:combo_60hz", _st)
	table.insert(handler.m_preconditions, {func=all_modes, control=_st})

	--/ SS Sunshafts
	_st = xml:InitStatic("video_adv:templ_item", nil)
	xml:InitStatic("video_adv:cap_r_sun_shafts_mode", _st)
	ctl = xml:InitComboBox("video_adv:list_r_sun_shafts_mode", _st)
	table.insert(handler.m_preconditions, {func=all_modes, control=_st})
	--/ SS Sunshafts

	-- Качество солнца
	_st = xml:InitStatic("video_adv:templ_item", nil)
	xml:InitStatic("video_adv:cap_r_sun_quality", _st)
	ctl = xml:InitComboBox("video_adv:list_r_sun_quality", _st)
	table.insert(handler.m_preconditions, {func=all_modes, control=_st})

	-- Качество солнечных лучей (саншафтов)
	_st = xml:InitStatic("video_adv:templ_item", nil)
	xml:InitStatic("video_adv:cap_sun_shafts", _st)
	ctl = xml:InitComboBox("video_adv:combo_sun_shafts", _st)
	table.insert(handler.m_preconditions, {func=all_modes, control=_st})
	
	-- AO
	_st = xml:InitStatic("video_adv:templ_item", nil)
	xml:InitStatic("video_adv:cap_ao", _st)
	ctl = xml:InitComboBox("video_adv:combo_ao", _st)
	table.insert(handler.m_preconditions, {func=all_modes, control=_st})

	-- SSAO
	_st = xml:InitStatic("video_adv:templ_item", nil)
	xml:InitStatic("video_adv:cap_ssao", _st)
	ctl = xml:InitComboBox("video_adv:combo_ssao", _st)
	handler.combo_ssao = ctl
	table.insert(handler.m_preconditions, {func=all_modes, control=_st})

	-- Размер теневой карты
	_st = xml:InitStatic("video_adv:templ_item", nil)
	xml:InitStatic("video_adv:cap_shadow_map", _st)
	ctl = xml:InitComboBox("video_adv:combo_shadow_map", _st)
	table.insert(handler.m_preconditions, {func=all_modes, control=_st})
	
	-- Качество теней
	_st = xml:InitStatic("video_adv:templ_item", nil)
	xml:InitStatic("video_adv:cap_particles_distance", _st)
	ctl = xml:InitTrackBar("video_adv:track_particles_distance", _st)
	table.insert(handler.m_preconditions, {func=all_modes, control=_st})
	
	----------------------------------------------------------
	-- Общее 
	_st = xml:InitStatic("video_adv:line_menu_1", nil)
	table.insert(handler.m_preconditions, {func=all_modes, control=_st})
	
    -- Детальный рельеф
	_st = xml:InitStatic("video_adv:templ_item", nil)
	xml:InitStatic("video_adv:cap_r_detail_bump", _st)
	xml:InitCheck("video_adv:check_r_detail_bump", _st)
    -- Steep parallax
	xml:InitStatic("video_adv:cap_r_steep_parallax", _st)
	xml:InitCheck("video_adv:check_r_steep_parallax", _st)
	table.insert(handler.m_preconditions, {func=all_modes, control=_st})

	-- Мягкие края воды
	_st = xml:InitStatic("video_adv:templ_item", nil)
	xml:InitStatic("video_adv:cap_soft_water", _st)
	xml:InitCheck("video_adv:check_soft_water", _st)
	-- Мягкие партиклы
	xml:InitStatic("video_adv:cap_soft_particles", _st)
	xml:InitCheck("video_adv:check_soft_particles", _st)
	table.insert(handler.m_preconditions, {func=all_modes, control=_st})
	
	-- Объемное освещение
	_st = xml:InitStatic("video_adv:templ_item", nil)
	xml:InitStatic("video_adv:cap_volumetric_light", _st)
	xml:InitCheck("video_adv:check_volumetric_light", _st)
    -- Мокрые поверхности
	xml:InitStatic("video_adv:cap_r3_dynamic_wet_surfaces", _st)
	xml:InitCheck ("video_adv:check_r3_dynamic_wet_surfaces", _st)
	table.insert(handler.m_preconditions, {func=all_modes, control=_st})

    -- Объемный дым
	_st = xml:InitStatic("video_adv:templ_item", nil)
	xml:InitStatic("video_adv:cap_r3_volumetric_smoke", _st)
	xml:InitCheck("video_adv:check_r3_volumetric_smoke", _st)
    -- Тесселяция
	xml:InitStatic("video_adv:cap_r4_tessellation", _st)
	xml:InitCheck("video_adv:check_r4_tessellation", _st)
	table.insert(handler.m_preconditions, {func=all_modes, control=_st})
	
	-- Тени от солнца
	_st = xml:InitStatic("video_adv:templ_item", nil)
	xml:InitStatic("video_adv:cap_r_sun", _st)
	xml:InitCheck("video_adv:check_r_sun", _st)
	-- Тени от травы
	xml:InitStatic("video_adv:cap_sun_details", _st)
	xml:InitCheck("video_adv:check_sun_details", _st)
	table.insert(handler.m_preconditions, {func=all_modes, control=_st})
	
	-- Тень от актора
	_st = xml:InitStatic("video_adv:templ_item", nil)
	xml:InitStatic("video_adv:cap_actor_shadow", _st)
	xml:InitCheck("video_adv:check_actor_shadow", _st)
	-- Glows switcher
	xml:InitStatic("video_adv:cap_glows", _st)
	xml:InitCheck("video_adv:check_glows", _st)
	table.insert(handler.m_preconditions, {func=all_modes, control=_st})
	----------------------------------------------------------
	-- Дополнительные 
	_st = xml:InitStatic("video_adv:line_menu_2", nil)
	table.insert(handler.m_preconditions, {func=all_modes, control=_st})
	
	-- Капли на экране
	_st = xml:InitStatic("video_adv:templ_item", nil)
	xml:InitStatic("video_adv:cap_rain_drops", _st)
	xml:InitCheck("video_adv:check_rain_drops", _st)
	-- Виньетка
	xml:InitStatic("video_adv:cap_vignette", _st)
	xml:InitCheck("video_adv:check_vignette", _st)
	table.insert(handler.m_preconditions, {func=all_modes, control=_st})
	
	-- Цветной градиент
	_st = xml:InitStatic("video_adv:templ_item", nil)
	xml:InitStatic("video_adv:cap_grading", _st)
	xml:InitCheck("video_adv:check_grading", _st)
	-- Хромическая абберация
	xml:InitStatic("video_adv:cap_ch_aberr", _st)
	xml:InitCheck("video_adv:check_ch_aberr", _st)
	table.insert(handler.m_preconditions, {func=all_modes, control=_st})

	btn = xml:Init3tButton("video_adv:btn_to_simply", self)
	handler:Register(btn, "btn_simply_graphic")
end
