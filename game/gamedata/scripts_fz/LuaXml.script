_G.xml = _G.xml or {}
local xml = _G.xml
-- symbolic name for tag index, this allows accessing the tag by var[TAG]
local TAG = 0

--// Added KD
function xml.xr_load(root_alias, local_path)
	local fs   = getFS()
	local path = fs:update_path(root_alias, local_path)
	if file_exists(path) then -- файл существует в распакованном виде на диске, можно использовать xml.load
		return xml.load(path) -- загрузить .xml файл книги
	elseif fs:exist(path) then -- файл существует, но в архиве
		local f = fs:r_open(path)
		local chars = {}
		local counter = 1
		while not f:r_eof() do
			chars[counter] = string.char(f:r_u8())
			counter = counter + 1
		end
		return xml.eval(table.concat(chars))
	end
	abort("[xml.xr_lod] cannot load file '%s'", path)
end
--// End
-- sets or returns tag of a LuaXML object
function xml.tag(var,_tag)
  if type(var)~="table" then return end
  if type(_tag)=="nil" then 
    return var[TAG]
  end
  var[TAG] = _tag
end

-- creates a new LuaXML object either by setting the metatable of an existing Lua table or by setting its tag
function xml.new(arg)
  if type(arg)=="table" then 
    setmetatable(arg,{__index=xml, __tostring=xml.str})
	return arg
  end
  local var={}
  setmetatable(var,{__index=xml, __tostring=xml.str})
  if type(arg)=="string" then var[TAG]=arg end
  return var
end

-- appends a new subordinate LuaXML object to an existing one, optionally sets tag
function xml.append(var,_tag)
  if type(var)~="table" then return end
  local newVar = xml.new(_tag)
  var[#var+1] = newVar
  return newVar
end

-- converts any Lua var into an XML string
function xml.str(var,indent,tagValue)
  if type(var)=="nil" then return end
  local indent = indent or 0
  local indentStr=""
  for i = 1,indent do indentStr=indentStr.."  " end
  local tableStr=""
  if type(var)=="table" then
    local tag = var[0] or tagValue or type(var)
    local s = indentStr.."<"..tag
    for k,v in pairs(var) do -- attributes 
      if type(k)=="string" then
        if type(v)=="table" and k~="_M" then --  otherwise recursiveness imminent
          tableStr = tableStr..xml.str(v,indent+1,k)
        else
          s = s.." "..k.."=\""..xml.encode(tostring(v)).."\""
        end
      end
    end
    if #var==0 and #tableStr==0 then
      s = s.." />\n"
    elseif #var==1 and type(var[1])~="table" and #tableStr==0 then -- single element
      s = s..">"..xml.encode(tostring(var[1])).."</"..tag..">\n"
    else
      s = s..">\n"
      for k,v in ipairs(var) do -- elements
        if type(v)=="string" then
          s = s..indentStr.."  "..xml.encode(v).." \n"
        else
          s = s..xml.str(v,indent+1)
        end
      end
      s=s..tableStr..indentStr.."</"..tag..">\n"
    end
    return s
  else
    local tag = type(var)
    return indentStr.."<"..tag.."> "..xml.encode(tostring(var)).." </"..tag..">\n"
  end
end


-- saves a Lua var as xml file
function xml.save(var,filename)
  if not var then return end
  if not filename or #filename==0 then return end
  local file = io.open(filename,"w")
  -- Fix by Gun12 -------------------------
    --file:write("<?xml version=\"1.0\"?>\n<!-- file \"",filename, "\", generated by LuaXML -->\n\n")
    file:write("<?xml version=\"1.0\" encoding=\"windows-1251\"?>\n\n")
    -- END Fix by Gun12 ----------------------
  file:write(xml.str(var))
  file:flush()
  io.close(file)
end


-- recursively parses a Lua table for a substatement fitting to the provided tag and attribute
function xml.find(var, tag, attributeKey,attributeValue)
  -- check input:
  if type(var)~="table" then return end
  if type(tag)=="string" and #tag==0 then tag=nil end
  if type(attributeKey)~="string" or #attributeKey==0 then attributeKey=nil end
  if type(attributeValue)=="string" and #attributeValue==0 then attributeValue=nil end
  -- compare this table:
  if tag~=nil then
    if var[0]==tag and ( attributeValue == nil or var[attributeKey]==attributeValue ) then
      setmetatable(var,{__index=xml, __tostring=xml.str})
      return var
    end
  else
    if attributeValue == nil or var[attributeKey]==attributeValue then
      setmetatable(var,{__index=xml, __tostring=xml.str})
      return var
    end
  end
  -- recursively parse subtags:
  for k,v in ipairs(var) do
    if type(v)=="table" then
      local ret = xml.find(v, tag, attributeKey,attributeValue)
      if ret ~= nil then return ret end
    end
  end
end