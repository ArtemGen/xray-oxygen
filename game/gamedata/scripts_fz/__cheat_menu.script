--[[ ------------------------------------------------------------------------------------------------
 File       : __cheat_menu.script
 Description: Переработанное меню повелителя зоны
 Copyright  : 2012-2014 © FrostyTech
 Author     : Viнt@rь   
 Last edit  : 03.06.2018 (Viнt@rь)
--]] ------------------------------------------------------------------------------------------------
--/										  Local Functions
--]] ------------------------------------------------------------------------------------------------
local SpawnItemInternal = function(section, distance)
	local position = db.actor:position()
	local direction = db.actor:direction()
	SpawnItem(section, position:add(direction:mul(distance + 5)))
end

local SpawnInventoryItem = function(section, distance)
	if distance == 0 then
		SpawnItemToInventory(section)
	else
		SpawnItemInternal(section, distance)
	end
end

local SpawnSquad = function(section)
	for i = 1, 65535 do
		local obj = alife():object(i)
		if obj and obj:section_name() == "smart_terrain" and obj.position:distance_to(db.actor:position()) <= 20 then
			xr_effects.create_squad(nil, nil, {section, obj:name()})
		end
	end
end

local SpawnAnomaly = function(section, distance)
	local position = db.actor:position()
	local direction = db.actor:direction()
	position = position:add(direction:mul(distance + 5))
	
	local anomaly = SpawnItem(section, position)
	if section:find("field") or section:find("teleport") or section:find("campfire") or section:find("death") or 
	   section:find("sarcofag") or section:find("zone_radioactive") or section:find("zone_mine_gravitational") then
		CreateAnomaly(anomaly, 3, "field")
	else
		CreateAnomaly(anomaly, 3)
	end
end

local function GetIniSection(section, ini)
	local values = {}
	if IsSectionExist(section, ini) then
		local res, key, value
		for i = 0, GetLineCount(section, ini) - 1 do
			res, key, value = ReadLine(section, i, ini)
			values[tostring(key)] = value
		end
		return values
	end
end
--]] ------------------------------------------------------------------------------------------------
--/											 Variables
--]] ------------------------------------------------------------------------------------------------
local main_modes = {
	{
		name = "ui_cheat_weather",
		table = "weather_table",
		execute = function(weather)
					if string.find(weather, "fx_") then
						level.set_weather_fx(weather)
					else
						level.set_weather(weather, true)
					end
				end
	},
	{
		name = "ui_cheat_community",
		table = "community_table",
		execute = function(community)
			db.actor:set_character_community(community, 0, 0)
		end
	},
	{
		name = "ui_cheat_infos",
		table = "infos_table",
		execute = function(info)
			give_info(info)
		end
	}
}

local spawner_modes = {
	{name = "ui_cheat_stalkers", table = "stalker_table", execute = SpawnItemInternal},
	{name = "ui_cheat_monsters", table = "monster_table", execute = SpawnItemInternal},
	{name = "ui_cheat_weapons", table = "weapons_table", execute = SpawnInventoryItem},
	{name = "ui_cheat_addons", table = "addons_table", execute = SpawnInventoryItem},
	{name = "ui_cheat_ammo", table = "ammo_table", execute = SpawnInventoryItem},
	{name = "ui_cheat_artefacts", table = "artefacts_table", execute = SpawnInventoryItem},
	{name = "ui_cheat_outfits", table = "outfits_table", execute = SpawnInventoryItem},
	{name = "ui_cheat_quest_items", table = "quest_items_table", execute = SpawnInventoryItem},
	{name = "ui_cheat_other", table = "other_table", execute = SpawnInventoryItem},
	{name = "ui_cheat_vehicles", table = "vehicles_table", execute = SpawnItemInternal},
	{name = "ui_cheat_objects", table = "objects_table", execute = SpawnItemInternal},
	{name = "ui_cheat_squads", table = "squad_table", execute = SpawnSquad},
	{name = "ui_cheat_anomalies", table = "anomalies_table", execute = SpawnAnomaly}
}
 
local item_text_position = vector2():set(2, 0)
--]] ------------------------------------------------------------------------------------------------
--/											Initialize
--]] ------------------------------------------------------------------------------------------------
--* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
-- *			                    		CUIListItem		                         				*
--* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class "CUIListItem" (CUIListBoxItem)
function CUIListItem:__init(height) super(height)
	self.text = self:GetTextItem()
	self.text:SetWndPos(item_text_position)
end
--* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
-- *			                    		CUICheatDialog	                         				*
--* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class "CUICheatDialog" (CUIScriptWnd)
function CUICheatDialog:__init() super()
	self.xml = CScriptXmlInit()
	self.xml:ParseFile("ui_cheat_dlg.xml")

	self:InitControls()
	self:InitCallBacks()
	self:UpdateControls()
	
	self.teleport_dialog = CUITeleportDialog(self)
	self.spawner_dialog = CUISpawnerDialog(self)
	self.extends_dialog = CUIExtendsDialog(self)
	
	self:AttachChild(self.teleport_dialog)
	self:AttachChild(self.spawner_dialog)
	self:AttachChild(self.extends_dialog)
end

function CUICheatDialog:InitControls()
	self:SetWndRect(Frect():set(0, 0, 1024, 768))
	
	local xml = self.xml
	
	self.form = xml:InitStatic("form", self)
	
	xml:InitFrame("form:items_list_frame", self.form)

	self.combo_box = xml:InitComboBox("form:combo_box", self.form)
	self.items_list = xml:InitListBox("form:items_list", self.form)
	self.surge_button = xml:Init3tButton("form:surge_button", self.form)
	self.demo_record_button = xml:Init3tButton("form:demo_record_button", self.form)
	self.god_check_box = xml:InitCheck("form:god_check_box", self.form)
	self.unlimited_ammo_check_box = xml:InitCheck("form:unlimited_ammo_check_box", self.form)
	self.no_clip_check_box = xml:InitCheck("form:no_clip_check_box", self.form)
	self.money_minus_button = xml:Init3tButton("form:money_minus_button", self.form)
	self.money_plus_button = xml:Init3tButton("form:money_plus_button", self.form)
	self.money_value = xml:InitStatic("form:money_value", self.form)	
	self.money_coefficient_spinner = xml:InitSpinNum("form:money_coefficient_spinner", self.form)
	self.hours_edit_box = xml:InitEditBox("form:hours_edit_box", self.form)
	self.apply_button = xml:Init3tButton("form:apply_button", self.form)
	
	-- Registering controls
	self:Register(self.combo_box,  		  			"combo_box")
	self:Register(self.items_list, 		  			"items_list")
	self:Register(self.surge_button, 	  			"surge_button")
	self:Register(self.demo_record_button,			"demo_record_button")
	self:Register(self.god_check_box,	  			"god_check_box")
	self:Register(self.unlimited_ammo_check_box,	"unlimited_ammo_check_box")
	self:Register(self.no_clip_check_box,			"no_clip_check_box")
	self:Register(self.money_minus_button,  		"money_minus_button")
	self:Register(self.money_plus_button, 			"money_plus_button")
	self:Register(self.apply_button, 	  			"apply_button")
end

function CUICheatDialog:InitCallBacks()
	self:AddCallback("combo_box",     				ui_events.LIST_ITEM_SELECT,			self.OnSelectedItemChanged,			self)
	self:AddCallback("items_list",    				ui_events.WINDOW_LBUTTON_DB_CLICK,	self.OnListItemDBClicked,			self)
	self:AddCallback("surge_button",	   			ui_events.BUTTON_CLICKED, 		  	self.OnSurgeButtonClick, 			self)
	self:AddCallback("demo_record_button",			ui_events.BUTTON_CLICKED, 		  	self.OnDemoRecordButtonClick,		self)
	self:AddCallback("god_check_box", 	   			ui_events.BUTTON_CLICKED, 		  	self.OnGodCheckBoxClick,			self)
	self:AddCallback("unlimited_ammo_check_box", 	ui_events.BUTTON_CLICKED, 		  	self.OnUnlimitedAmmoCheckBoxClick,	self)
	self:AddCallback("no_clip_check_box", 			ui_events.BUTTON_CLICKED, 		  	self.OnNoClipCheckBoxClick,			self)
	self:AddCallback("money_minus_button", 			ui_events.BUTTON_CLICKED, 		  	self.OnMoneyMinusButtonClick,		self)
	self:AddCallback("money_plus_button",  			ui_events.BUTTON_CLICKED, 		  	self.OnMoneyPlusButtonClick,		self)
	self:AddCallback("apply_button",    			ui_events.BUTTON_CLICKED, 		  	self.OnApplyButtonClick, 			self)
end

function CUICheatDialog:UpdateControls()
	local opt = COptionsManager()
	opt:SetCurrentValues("cheat_option")

	for i, v in ipairs(main_modes) do
		self.combo_box:AddItem(i .. ". " .. GetString(v.name), i - 1)
	end
	self.combo_box:SetSelectedItem(0)
	self:ParseTableToList(__cheat_tbl[main_modes[1].table])
	
	if IsGameStarted() then
		self.money_value:TextControl():SetText(self:FormatMoneyString())
	else
		self.surge_button:Enable(false)
		self.demo_record_button:Enable(false)
		self.money_minus_button:Enable(false)
		self.money_plus_button:Enable(false)
		self.money_coefficient_spinner:Enable(false)
		self.hours_edit_box:Enable(false)
		self.apply_button:Enable(false)
	end
end

function CUICheatDialog:OnSelectedItemChanged()
	self.items_list:Clear()
	
	local selected_mode = main_modes[self.combo_box:CurrentID() + 1]
	if __cheat_tbl[selected_mode.table] then
		self:ParseTableToList(__cheat_tbl[selected_mode.table])
	else
		log(string.format("~ cheat table [%s] not found", selected_mode.table))
	end
end

function CUICheatDialog:OnListItemDBClicked()
	if IsGameStarted() then
		local selected_mode = main_modes[self.combo_box:CurrentID() + 1]
		selected_mode.execute(self.items_list:GetSelectedItem().data)
	else
		log("~ Error! Game is not started!")
	end
end

function CUICheatDialog:OnSurgeButtonClick()
	surge_manager.start_surge()
end

function CUICheatDialog:OnDemoRecordButtonClick()
	get_console():execute("demo_record 1")
	self:Hide()
end

function CUICheatDialog:OnGodCheckBoxClick()
	get_console():execute("g_god " .. boolean2number(self.god_check_box:GetCheck()))
end

function CUICheatDialog:OnUnlimitedAmmoCheckBoxClick()
	get_console():execute("g_unlimitedammo " .. boolean2number(self.unlimited_ammo_check_box:GetCheck()))
end

function CUICheatDialog:OnNoClipCheckBoxClick()
	get_console():execute("g_no_clip " .. boolean2number(self.no_clip_check_box:GetCheck()))
end

function CUICheatDialog:OnMoneyMinusButtonClick()
	local coefficient = tonumber(self.money_coefficient_spinner:GetText())
	coefficient = coefficient == 0 and 1 or coefficient
	db.actor:give_money(-coefficient * 1000)

	self.money_value:TextControl():SetText(self:FormatMoneyString())
end

function CUICheatDialog:OnMoneyPlusButtonClick()
	local coefficient = tonumber(self.money_coefficient_spinner:GetText())
	coefficient = coefficient == 0 and 1 or coefficient
	db.actor:give_money(coefficient * 1000)

	self.money_value:TextControl():SetText(self:FormatMoneyString())
end

function CUICheatDialog:OnApplyButtonClick()
	local hours = tonumber(self.hours_edit_box:GetText())
	if hours then
		level.change_game_time(0, hours, 0)
	end
end

function CUICheatDialog:ParseTableToList(table)
	for k, v in pairs(table) do
		if type(v) == 'table' then
			self:AddItemToList(v[2], v[1])
		else
			local item_name = GetItemName(v)
			self:AddItemToList(item_name and GetString(item_name) or v, v)
		end
	end
end

function CUICheatDialog:AddItemToList(name, data)
	local item = CUIListItem(self.items_list:GetItemHeight())
	item.text:SetText(name)
	item.data = data

	self.items_list:AddExistingItem(item)	
end

function CUICheatDialog:OnKeyboard(dik, keyboard_action)
	CUIScriptWnd.OnKeyboard(self, dik, keyboard_action)
	if dik_to_bind(dik) == key_bindings.kQUIT then
		self:Hide()
	end
	return true
end

function CUICheatDialog:Show()
	self.teleport_dialog:ShowDialog()
	self.spawner_dialog:ShowDialog()
	self.extends_dialog:ShowDialog()
	self:ShowDialog()
end

function CUICheatDialog:Hide()
	self.teleport_dialog:HideDialog()
	self.spawner_dialog:HideDialog()
	self.extends_dialog:HideDialog()
	self:HideDialog()
end

function CUICheatDialog:FormatMoneyString()
	return string.format("%s %d", GetString("ui_cheat_money"), db.actor:money())
end

--* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
-- *			                    		CUITeleportDialog                         				*
--* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class "CUITeleportDialog" (CUIScriptWnd)
function CUITeleportDialog:__init(parent) super()
	self.parent = parent

	self:InitControls()
	self:InitCallBacks()
	self:UpdateControls()
end

function CUITeleportDialog:InitControls()
	self:SetWndRect(Frect():set(0, 0, 1024, 768))
	
	local xml = self.parent.xml

	self.form = xml:InitStatic("teleport", self)

	xml:InitFrame("teleport:coordinates_list_frame", self.form)
	
	self.level_combo_box = xml:InitComboBox("teleport:level_combo_box", self.form)
	self.coordinates_list = xml:InitListBox("teleport:coordinates_list", self.form)
	self.x_edit_box = xml:InitEditBox("teleport:x_edit_box", self.form)
	self.y_edit_box = xml:InitEditBox("teleport:y_edit_box", self.form)
	self.z_edit_box = xml:InitEditBox("teleport:z_edit_box", self.form)
	self.name_edit_box = xml:InitEditBox("teleport:name_edit_box", self.form)
	self.jump_button = xml:Init3tButton("teleport:jump_button", self.form)
	self.actor_position_button = xml:Init3tButton("teleport:actor_position_button", self.form)
	self.save_button = xml:Init3tButton("teleport:save_button", self.form)
	self.teleport_button = xml:Init3tButton("teleport:teleport_button", self.form)
	self.teleport_five_button = xml:Init3tButton("teleport:teleport_five_button", self.form)

	self.message_box = CUIMessageBoxEx()
	
	-- Registering controls
	self:Register(self.level_combo_box,			"level_combo_box")
	self:Register(self.coordinates_list,		"coordinates_list")
	self:Register(self.jump_button,	 			"jump_button")	
	self:Register(self.actor_position_button,	"actor_position_button")
	self:Register(self.save_button,	  		 	"save_button")
	self:Register(self.teleport_button,	  	 	"teleport_button")
	self:Register(self.teleport_five_button,	"teleport_five_button")
	self:Register(self.message_box,			 	"message_box")
end

function CUITeleportDialog:InitCallBacks()
	self:AddCallback("level_combo_box",			ui_events.LIST_ITEM_SELECT,			self.OnSelectedLevelChanged,		self)
	self:AddCallback("coordinates_list",		ui_events.LIST_ITEM_CLICKED,		self.OnListItemClicked,				self)
	self:AddCallback("coordinates_list",		ui_events.WINDOW_LBUTTON_DB_CLICK,	self.OnListItemDBClicked,			self)
	
	self:AddCallback("jump_button",				ui_events.BUTTON_CLICKED,			self.OnJumpButtonClick,				self)
	self:AddCallback("actor_position_button",	ui_events.BUTTON_CLICKED,			self.OnActorPositionButtonClick,	self)
	self:AddCallback("save_button",				ui_events.BUTTON_CLICKED,			self.OnSaveButtonClick,				self)
	self:AddCallback("teleport_button",			ui_events.BUTTON_CLICKED,			self.OnTeleportButtonClick,			self)
	self:AddCallback("teleport_five_button",	ui_events.BUTTON_CLICKED,			self.OnTeleport5ButtonClick,		self)
	
	self:AddCallback("message_box",				ui_events.MESSAGE_BOX_NO_CLICKED,	self.OnMessageBoxClickNo,			self)
	self:AddCallback("message_box",				ui_events.MESSAGE_BOX_YES_CLICKED,	self.OnMessageBoxClickYes,			self)
end

function CUITeleportDialog:UpdateControls()
	if IsGameStarted() then
		local i = 0
		for level in game_graph():levels() do
			self.level_combo_box:AddItem(alife():level_name(level.id) .. " ", i)
			i = i + 1
		end
		self.level_combo_box:SetSelectedItem(0)
		
		self.ini_file = ini_file("coordinates.ltx", false)		
		self.actor = db.actor
		self.section = level.name()
		self.coordinates = GetIniSection(self.section, self.ini_file)
		
		self:FillCoordinatesList(self.coordinates)
	else
		self.level_combo_box:Enable(false)
		self.x_edit_box:Enable(false)
		self.y_edit_box:Enable(false)
		self.z_edit_box:Enable(false)
		self.name_edit_box:Enable(false)
		self.jump_button:Enable(false)
		self.actor_position_button:Enable(false)
		self.save_button:Enable(false)
		self.teleport_button:Enable(false)
		self.teleport_five_button:Enable(false)
	end
end

function CUITeleportDialog:OnSelectedLevelChanged()
	self.section = self.level_combo_box:GetText():trim()
	
	if not self.ini_file:section_exist(self.section) then
		self.ini_file:w_string(self.section)
	end
	
	self.coordinates = GetIniSection(self.section, self.ini_file)
	self:FillCoordinatesList(self.coordinates)
end

function CUITeleportDialog:OnListItemClicked()
	local selected_item_name = self.coordinates_list:GetSelectedItem():GetTextItem():GetText()
	local coordinates = self.coordinates[selected_item_name]:split(",")
	
	self.x_edit_box:SetText(coordinates[1])
	self.y_edit_box:SetText(coordinates[2])
	self.z_edit_box:SetText(coordinates[3])
	self.name_edit_box:SetText(selected_item_name)
end

function CUITeleportDialog:OnListItemDBClicked()
	self:OnTeleportButtonClick()
end

function CUITeleportDialog:OnJumpButtonClick()
	get_console():execute("jump_to_level " .. self.section)
	self.parent:Hide()
end

function CUITeleportDialog:OnActorPositionButtonClick()
	self.x_edit_box:SetText(math.round(self.actor:position().x))
	self.y_edit_box:SetText(math.round(self.actor:position().y))
	self.z_edit_box:SetText(math.round(self.actor:position().z))
end

function CUITeleportDialog:OnSaveButtonClick()
	local x = tonumber(self.x_edit_box:GetText())
	local y = tonumber(self.y_edit_box:GetText())
	local z = tonumber(self.z_edit_box:GetText())
	local name = self.name_edit_box:GetText():trim()
	
	if x and y and z and name and name ~= "" then
		if not self.ini_file:line_exist(self.section, name) then
			self.coordinates[name] = string.format("%s, %s, %s", x, y, z)
			self.ini_file:w_string(self.section, name, self.coordinates[name])
			self:FillCoordinatesList(self.coordinates)
		else
			self.message_box:InitMessageBox("message_box_yes_no")
			self.message_box:SetText("Позиция с таким названием уже существует, Вы уверены, что хотите перезаписать ее?")
			self.message_box:ShowDialog(true)
		end
	end
end

function CUITeleportDialog:OnTeleportButtonClick()
	local x = tonumber(self.x_edit_box:GetText())
	local y = tonumber(self.y_edit_box:GetText())
	local z = tonumber(self.z_edit_box:GetText())
	if x and y and z then
		self.actor:set_actor_position(vector():set(x, y, z))
	end
end

function CUITeleportDialog:OnTeleport5ButtonClick()
	local direction = self.actor:direction()
	local position = self.actor:position()
	self.actor:set_actor_position(position:add(direction:mul(5)))
end

function CUITeleportDialog:OnMessageBoxClickYes()
	local x = tonumber(self.x_edit_box:GetText())
	local y = tonumber(self.y_edit_box:GetText())
	local z = tonumber(self.z_edit_box:GetText())
	local name = self.name_edit_box:GetText():trim()
	
	self.coordinates[name] = string.format("%s, %s, %s", x, y, z)

	self.ini_file:remove_line(self.section, name)
	self.ini_file:w_string(self.section, name, self.coordinates[name])
	self:FillCoordinatesList(self.coordinates)
end

function CUITeleportDialog:OnMessageBoxClickNo() end

function CUITeleportDialog:FillCoordinatesList(coordinates)
	self.coordinates_list:RemoveAll()
	
	local height = self.coordinates_list:GetItemHeight()
	for name, v in pairs(coordinates) do
		local item = CUIListItem(height)
		item.text:SetText(name)
		self.coordinates_list:AddExistingItem(item)	
	end
end

--* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
-- *			                    		CUISpawnerDialog                         				*
--* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class "CUISpawnerDialog" (CUIScriptWnd)
function CUISpawnerDialog:__init(parent) super()
	self.parent = parent

	self:InitControls()
	self:InitCallBacks()
	self:UpdateControls()
end

function CUISpawnerDialog:InitControls()
	self:SetWndRect(Frect():set(0, 0, 1024, 768))
	
	local xml = self.parent.xml
	
	self.form = xml:InitStatic("spawner", self)
	
	xml:InitFrame("spawner:items_list_frame", self.form)
	
	self.icon = xml:InitStatic("spawner:icon", self.form)
	self.combo_box = xml:InitComboBox("spawner:combo_box", self.form)
	self.distance_spinner = xml:InitSpinNum("spawner:distance_spinner", self.form)
	self.items_list = xml:InitListBox("spawner:items_list", self.form)

	-- Registering controls
	self:Register(self.combo_box,  "spawner_combo_box")
	self:Register(self.items_list, "spawner_items_list")
end

function CUISpawnerDialog:InitCallBacks()
	self:AddCallback("spawner_combo_box",  ui_events.LIST_ITEM_SELECT, 	   	  self.OnSelectedItemChanged, self)
	self:AddCallback("spawner_items_list", ui_events.LIST_ITEM_CLICKED, 	  self.OnListItemClicked,	  self)
	self:AddCallback("spawner_items_list", ui_events.WINDOW_LBUTTON_DB_CLICK, self.OnListItemDBClicked,   self)
end

function CUISpawnerDialog:UpdateControls()
	for i, v in ipairs(spawner_modes) do
		self.combo_box:AddItem(i .. ". " .. GetString(v.name), i - 1)
	end

	self.combo_box:SetSelectedItem(0)
	self:ParseTableToList(__cheat_tbl[spawner_modes[1].table])
end

function CUISpawnerDialog:OnSelectedItemChanged()
	self.items_list:Clear()

	local selected_mode = spawner_modes[self.combo_box:CurrentID() + 1]	
	if __cheat_tbl[selected_mode.table] then
		self:ParseTableToList(__cheat_tbl[selected_mode.table])
	else
		log(string.format("~ spawner table [%s] not found", selected_mode.table))
	end
end

function CUISpawnerDialog:OnListItemClicked()
	local section = self.items_list:GetSelectedItem().section
	
	local x = GetItemIconX(section)
	local y = GetItemIconY(section)
	local w = GetItemIconWidth(section)
	local h = GetItemIconHeight(section)
	
	if x and y and w and h then
		self.icon:InitTexture("ui\\ui_icon_equipment")
		self.icon:SetTextureRect(Frect():set(x * 50, y * 50, x * 50 + 50 * w, y * 50 + 50 * h))
	end
end

function CUISpawnerDialog:OnListItemDBClicked()
	if IsGameStarted() then
		local selected_mode = spawner_modes[self.combo_box:CurrentID() + 1]
		selected_mode.execute(self.items_list:GetSelectedItem().section, tonumber(self.distance_spinner:GetText()))
	else
		log("~ Error spawn item! Game is not started!")
	end
end

function CUISpawnerDialog:ParseTableToList(table)
	for k, v in pairs(table) do
		if type(v) == 'table' then
			self:AddItemToList(v[2], v[1])
		else
			local item_name = GetItemName(v)
			self:AddItemToList(item_name and GetString(item_name) or v, v)
		end
	end
end

function CUISpawnerDialog:AddItemToList(name, section)
	if IsSectionExist(section) then
		local item = CUIListItem(self.items_list:GetItemHeight())
		item.text:SetText(name)
		item.section = section

		self.items_list:AddExistingItem(item)
	else
		log(string.format("~ section [%s] not exist", section))
	end
end

--* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
-- *			                    		CUIExtendsDialog                         				*
--* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class "CUIExtendsDialog" (CUIScriptWnd)
function CUIExtendsDialog:__init(parent) super()
	self.parent = parent

	self:InitControls()
	self:InitCallBacks()
	self:UpdateControls()
end

function CUIExtendsDialog:InitControls()
	self:SetWndRect(Frect():set(0, 0, 1024, 768))
	
	local xml = self.parent.xml

	self.form = xml:InitStatic("extends", self)

	self.fov_track_bar = xml:InitTrackBar("extends:fov_track_bar", self.form)
	self.hud_fov_track_bar = xml:InitTrackBar("extends:hud_fov_track_bar", self.form)
	
	self.fov_value = xml:InitStatic("extends:fov_value", self.form)
	self.hud_fov_value = xml:InitStatic("extends:hud_fov_value", self.form)
	
	-- Registering controls
	self:Register(self.fov_track_bar,		"fov_track_bar")
	self:Register(self.hud_fov_track_bar,	"hud_fov_track_bar")
end

function CUIExtendsDialog:InitCallBacks()
	self:AddCallback("fov_track_bar", 		ui_events.BUTTON_CLICKED, self.OnFovValueChanged,    self)
	self:AddCallback("hud_fov_track_bar",	ui_events.BUTTON_CLICKED, self.OnHudFovValueChanged, self)
end

function CUIExtendsDialog:UpdateControls()
	local opt = COptionsManager()
	opt:SetCurrentValues("cheat_option")
	
	self.fov_value:TextControl():SetText(math.round(self.fov_track_bar:GetFValue()))
	self.hud_fov_value:TextControl():SetText(math.round(self.hud_fov_track_bar:GetFValue(), 2))
end

function CUIExtendsDialog:OnFovValueChanged()
	local fov = self.fov_track_bar:GetFValue()
	self.fov_value:TextControl():SetText(math.round(fov))
	get_console():execute("fov " .. fov)
end

function CUIExtendsDialog:OnHudFovValueChanged()
	local fov = self.hud_fov_track_bar:GetFValue()
	self.hud_fov_value:TextControl():SetText(math.round(fov, 2))
	get_console():execute("hud_fov " .. fov)
end

--]] ------------------------------------------------------------------------------------------------
--/											Functions
--]] ------------------------------------------------------------------------------------------------
--local cheat_dialog
function GetCheatDialog()
	if not cheat_dialog then
		cheat_dialog = CUICheatDialog()
	end
	return cheat_dialog
end

-- Спавн аномалии
-- time1 - время работы  в сек
-- time2 - время неработы в сек
function CreateAnomaly(anomaly, rad_anom, mode, time1, time2)
	local packet = net_packet()
	packet:w_begin(0)
	anomaly:STATE_Write(packet)
	packet:r_seek(2)

	local game_vertex_id = packet:r_u16()
	local cse_alife_object__unk1_f32 = packet:r_float()
	local cse_alife_object__unk2_u32 = packet:r_s32()
	local level_vertex_id = packet:r_s32()
	local object_flags = packet:r_s32()
	local custom_data = packet:r_stringZ()
	local story_id = packet:r_s32()
	local cse_alife_object__unk3_u32 = packet:r_s32()

	local shape_count = packet:r_u8()
	for i = 1, shape_count do
		local shape_type = packet:r_u8()
		if shape_type == 0 then
			local center = packet:r_vec3()
			local radius = packet:r_float()
		else
			local box = packet:r_matrix()
		end
	end

	local restrictor_type = packet:r_u8()

	local cse_alife_custom_zone__unk1_f32 = packet:r_float()
	local cse_alife_custom_zone__unk2_u32 = packet:r_s32()
	local on_off_mode_enabled_time = packet:r_s32()
	local on_off_mode_disabled_time = packet:r_s32()
	local on_off_mode_shift_time = packet:r_s32()

	local offline_interactive_radius = packet:r_float()
	local artefact_spawn_places_count = packet:r_u16()
	local cse_alife_anomalous_zone__unk1_u32 = packet:r_s32()

	local last_spawn_time_present = packet:r_u8()

	packet:w_u16(game_vertex_id)
	packet:w_float(cse_alife_object__unk1_f32)
	packet:w_s32(cse_alife_object__unk2_u32)
	packet:w_s32(level_vertex_id)
	packet:w_s32(object_flags)
	packet:w_stringZ(mode or custom_data)
	packet:w_s32(story_id)
	packet:w_s32(cse_alife_object__unk3_u32)

	packet:w_u8(1)
	packet:w_u8(0)
	
	local sphere_center = vector()
	sphere_center:set(0, 0, 0)
	packet:w_vec3(sphere_center)
	
	radius = rad_anom
	packet:w_float(radius)

	packet:w_u8(restrictor_type)

	packet:w_float(cse_alife_custom_zone__unk1_f32)
	cse_alife_custom_zone__unk2_u32 = bit.bnot(0)--bit_not(0)
	packet:w_s32(cse_alife_custom_zone__unk2_u32)

	if time1 then
		packet:w_s32(time1)
	else
		packet:w_s32(on_off_mode_enabled_time)
	end

	if time2 then
		packet:w_s32(time2)
	else      
		packet:w_s32(on_off_mode_disabled_time)
	end
	packet:w_s32(on_off_mode_shift_time)

	packet:w_float(offline_interactive_radius)
	packet:w_u16(artefact_spawn_places_count)
	packet:w_s32(cse_alife_anomalous_zone__unk1_u32)

    if not mode then
      	packet:w_u8(last_spawn_time_present)  
    end
    
	anomaly:STATE_Read(packet, packet:w_tell() - packet:r_tell())
end
