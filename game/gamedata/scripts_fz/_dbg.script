--[[ ------------------------------------------------------------------------------------------------
 File       : _dbg.script
 Description: Debug functions(скрипт в релиз не совать!)
 Copyright  : 2012-2014 © FrostyTech
 Author     : Viнt@rь   
 Last edit  : 27.07.2013 (Viнt@rь)
--]] ------------------------------------------------------------------------------------------------
--/											Variables
--]] ------------------------------------------------------------------------------------------------
local save_markers = {}
local colors = {
	["~"] = "%c[255,255,255,0]", 	-- желтый
	["!"] = "%c[255,255,0,0]",	 	-- красный
	["-"] = "%c[255,0,255,0]",	 	-- зеленый
	["@"] = "%c[255,123,104,238]"	-- синий
}
--]] ------------------------------------------------------------------------------------------------
--/											Initialize
--]] ------------------------------------------------------------------------------------------------
function Init()
	local callbacks = {
		--{event = "ActorSpawn", 	func = OnActorSpawn},
		--{event = "ActorHit", 	func = OnActorHit},
		--{event = "StorageSave", func = Save},
		--{event = "StorageLoad", func = Load},
		--{event = "StorageLoaded", func = Load},
		--{event = "ActorSave", 	func = Save},
		--{event = "ActorLoad", 	func = Load},
		--{event = "ActorUpdate", func = Update},
		--{event = "PhysicsUse",  func = OnPhysicsUse},
		{event = "KeyPress", 	func = OnKeyPress},
	}
	
	for k, v in pairs(callbacks) do
		event(v.event):register(v.func)
	end
end
--]] ------------------------------------------------------------------------------------------------
--/											Callback`s
--]] ------------------------------------------------------------------------------------------------
function Update()

end

function OnActorHit(data)
	--_log("@OnActorHit")
	--_log("who_name = %s", data.who:character_name())
	--_log("bone_idx = %s", data.iBoneIdx)
	--_log("amount   = %s", data.iAmount)
	--_log("@OnActorHit")
end

function OnKeyPress(data)
	--_log("OnKeyPress: key = [%s], bind = [%s]", data.key, dik_to_bind(data.key))
	if data.key == DIK_keys.DIK_NUMPAD0 then
		__cheat_menu.GetCheatDialog():Show()
	elseif data.key == DIK_keys.DIK_NUMPAD1 then
		_s_options.CDebugOptions():ShowDialog()
	elseif data.key == DIK_keys.DIK_NUMPAD2 then
	elseif data.key == DIK_keys.DIK_NUMPAD3 then
	end
end

function Save()
end

function Load()
end

function OnItemDrop(e)
	_log("dropped")
end

function InHeatingZone()
	_log("InHeatingZone")
end
function OutHeatingZone()
	_log("OutHeatingZone")
end

function OnPhysicsUse(data)
	_log("--CPhysicsBinder:use_callback")
end
--]] ------------------------------------------------------------------------------------------------
--/											Functions
--]] ------------------------------------------------------------------------------------------------
--[[
--	Выдача логового сообщения
--]]
function _log(msg, ...)
	if ReadVar("debug", debug_values["debug"]) and msg and msg:len() > 0 then
		local find_position = msg:find('[~!@@*---]')
		msg = (find_position and find_position ~= 1) and msg:sub(find_position, find_position) .. " " .. msg:sub(1, find_position - 1) .. msg:sub(find_position + 1) or msg
		msg = ... and string.format(msg, ...) or msg
		
		if ReadVar("log", debug_values["log"]) then
			log(msg)
		end
		
		if ReadVar("news", debug_values["news"]) then
			local header = "Log message"
			local color = colors[msg:sub(1, 1)] or ""
			SendTip(color ~= "" and color .. msg:sub(1 - msg:len()) or msg, header, nil, 10, "pda", false)
		end
	end
end

function _printf(msg, ...)
	--[[if ReadVar("debug", debug_values["debug"]) and ReadVar("printf", debug_values["printf"]) then
		local is_g = 0
		if not debug then
			log(string.format(msg, ...))
			return
		end
		local info_table = debug.getinfo(2)
		local script_name = string.gsub(info_table.short_src, "%.script", "")
		script_name = string.gsub(script_name, "gamedata\\scripts\\", "")

		if scripts_to_print[script_name] == false then return end

		script_name, is_g = string.gsub(script_name, "_g", "")
		if is_g == 0 then
			msg = script_name .. ":(" .. info_table.currentline .. "):" .. msg
		end
		log(string.format(msg, ...))
	end--]]
end

--[[
--	Креш игры с выводом сообщения в лог
--]]
function _abort(msg, ...)
	if ReadVar("debug", debug_values["debug"]) then
		msg = msg or ""
		msg = ... and string.format("ABORT " .. msg, ...) or "ABORT " .. msg
		
		if ReadVar("abort", debug_values["abort"]) then
			error_log(msg)
		else
			_log("!" .. msg)
		end
	end
end

--[[
--	Print table
--	@param _table	table to print
--	@param title	table title
--]]
function _print_table(table, title)
	title = title or ""
	if type(table) == "table" then
		if next(table) then
			_printf(title .. "{")
			for k, v in pairs(table) do
				local value_type = type(v)
				if value_type == "table" then
					_printf(title .. ".%s = ", tostring(k))
					store_table(v, "	")
				else
					if value_type == "userdata" and type(v.getP) == "function" then -- vector
						if type(v.x) == "number" and type(v.y) == "number" and type(v.z) == "number" then
							v = string.format("%f, %f, %f", v.x, v.y, v.z)
						else
							v = "vector"
						end
					elseif value_type == "string" or value_type == "number" or value_type == "boolean" then
					else
						v = value_type
					end
					_printf(title .. "%s = \"%s\",", tostring(k), v)
				end
			end
			_printf(title .. "},")
		else
			_printf("~ %s table is empty", title)
		end
	else
		_printf("~ wrong table %s type %s", title, type(table))
	end
end

--[[
--	Проверка корректности сейв/лоад
--]]
function _chek_save_load(pk, mode, done, prefix, obj, log)
	--[[if ReadVar("check_save_load", debug_values["check_save_load"]) then
		local sMark = sPrefix or "<error>" --/ предустановка ключа маркера
		if oObj then sMark = sMark..":"..tostring((type(oObj.name) == 'function' and oObj:name()) or oObj.name) end
		
		if type(pk) ~= 'userdata' then
			_abort("%s:set_save_marker:[%s/%s]:m[%s]:f[%s]:p=[%s]~wrong!", sModule, sPrefix, oObj and oObj:name(), sMode, tostring(bDone), type(pk))
		elseif bDone == false then --/ начало чтения/записи пакета (начальный индекс)
			if sMode == "load" then --/ режим 'чтение'
				tSaveMarkers[sMark] = pk:r_tell() --/ запоминаем индекс начального байта чтения
				if bLog then _log("@set_save_marker:LOAD(>):Size=r_tell:[%s]/r_elapsed:(%s):[%s]", tSaveMarkers[sMark], pk:r_elapsed(), sMark) end --/#~#
			elseif sMode == "save" then --/ режим 'запись'
				local iSize = pk:w_tell() --/ индекс начального байта записи
				tSaveMarkers[sMark] = iSize --/ запоминаем
				if iSize < iPkSize - 4 then
					if bLog then _log("@set_save_marker:SAVE(>):Size=w_tell:[%s]:[%s]", tSaveMarkers[sMark], sMark) end --/#~#
				else
					--if not db.iErrIdx then db.iErrIdx = 20 end --/ флаг переполнения сэйва
					_abort("set_save_marker:[%s]:Size=[%s]~You_are_saving_too_much", sMark, tostring(iSize))
				end
			else _abort("set_save_marker:[%s]/[%s]:Incorrect_Mode=[%s]", sMark, tostring(bDone), tostring(sMode))
			end
		elseif bDone == true then --/ завершение чтения/записи (конечный индекс)
			local iSize = tSaveMarkers[sMark]
			if iSize then
				if sMode == "load" then --/ режим 'чтение'
					iSize = pk:r_tell() - iSize --/ кол-во прочитанных байт
					local iSizeW = iSize
					if iSizeW == iSize then --/ соответствует контрольному?
						if bLog then _log("@set_save_marker:LOAD(!):Size=[%s]:[%s]", tostring(iSize), sMark) end --/#~#
						return iSize --/> кол-во прочитанных байт
					end --/ НЕ соответствует контрольному
					--if not db.iErrIdx then db.iErrIdx = 10 end --/ флаг ошибки загрузки пакета
					_printf("!set_save_marker:LOAD(x):Size=[%s]<x>[%s]:Left=[%s]:[%s]", tostring(iSize), tostring(iSizeW), pk:r_elapsed(), sMark)
					_abort("set_save_marker:[%s]:LOAD:Size=[%s]<x>[%s]", sMark, tostring(iSize), tostring(iSizeW))
				elseif sMode == "save" then --/ режим 'запись'
					iSize = pk:w_tell() - iSize --/ кол-во записанных байт
					pk:w_u16(iSize) --/ запись маркера в пакет (кол-во записанных байт)
					if iSize < iPkSize then
						if bLog then _log("@set_save_marker:SAVE(!):Size=[%s]:[%s]", iSize, sMark) end --/#~#
					else
						--db.iErrIdx = 23 --/ фатальное переполнение
						_printf("!set_save_marker:[%s]:Size=[%s]~NET-PACKET_CAN_BE_CORRUPTED", sMark, tostring(iSize))
					end
					return iSize --/> кол-во записанных байт
				else _abort("set_save_marker:[%s]/[%s]:Incorrect_Mode=[%s]", sMark, tostring(bDone), tostring(sMode))
				end
				tSaveMarkers[sMark] = nil --/ подчищаем
			else _abort("set_save_marker:Trying_to_check_without_marker=[%s/%s]", sMark, tostring(sMode))
			end
		else _abort("set_save_marker:[%s]:Incorrect_marker=[%s/%s]", sMark, tostring(sMode), tostring(bDone))
		end
	end--]]
end
--/--------------------------------------------------------------------------