--[[ -----------------------------------------------------------------------------------------------
 File       : _g.script
 Description: global space
 Copyright  : 2004 © GSC Game World
 Author     : GSC Game World
 Last edit  : 03.11.2014 (Viнt@rь)
--]] -----------------------------------------------------------------------------------------------
--/											  Variables
--]] -----------------------------------------------------------------------------------------------
prefetch("_s_utils")

schemes = {} -- соответствие схем модулям
stypes = {} -- типы схем

dev_debug = false
sim_debug = false
mus_vol = 0
amb_vol = 0

local monster_classes = {}
local stalker_classes = {}
local weapon_classes = {}
local artefact_classes = {}
local outfit_classes = {}
local item_classes = {}

local scripts_to_print = {
	["stalker_generic"] = true,
	["xr_smartcover"] = true,
	["xr_logic"] = true,
	["xr_conditions"] = true,
	["xr_cover"] = true,
	["xr_motivator"] = true,
	["xr_walker"] = true,
	["xr_camper"] = true,
	["xr_kamp"] = true,
	["restrictor_manager"] = true,
	["sim_board"] = true,
	["sim_faction"] = true,
	["post_combat_idle"] = true,
	["xr_death"] = true,
	["xr_sound"] = true,
	["utils"] = true,
	["treasure_manager"] = true,
	["object_collection"] = true,
	["se_actor"] = true,
	["smart_terrain"] = true,
	["bind_physic_object"] = true,
	["bind_heli"] = true,
	["bind_anomaly_zone"] = true,
	["bind_stalker"] = true,
	["state_mgr_animation"] = true,
	["se_stalker"] = true,
	["db"] = true,
	["sim_squad_generic"] = true,
	["sim_squad_scripted"] = true,
	["se_smart_cover"] = true,
	["se_monster"] = true,
	["dialog_manager"] = true,
	["xr_combat_ignore"] = true,
	["xr_remark"] = true,
	["cover_manager"] = true,
	["xr_danger"] = true,
	["task_manager"] = true,
	["task_objects"] = true
}
--]] -----------------------------------------------------------------------------------------------
--/											Debug Functions
--]] -----------------------------------------------------------------------------------------------
function printf(fmt, ...)
	--if _printf then
	--	_printf(fmt, ...)
	--end
end

-- Крешнуть игру (после вывода сообщения об ошибке в лог)
function abort(fmt, ...)
	if _abort then
		_abort(fmt, ...)
	end
end

-- выводит в лог стэк вызова функций.
function callstack()
	if debug then
		log(debug.traceback(2))
	end
end
--]] -----------------------------------------------------------------------------------------------
--/											Functions
--]] -----------------------------------------------------------------------------------------------
--[[
--	Загружает схему из файла на диске и активирует в мотиваторе.
--	Здесь:
--		filename - имя файла, в котором реализована схема, без расширения
--		scheme - имя схем
--]]
function load_scheme(filename, scheme, stype)
	schemes[scheme] = filename
	stypes[scheme] = stype
end

if not time_global then
	time_global = function() return device():time_global() end
end

if not jit then profiler.setup_hook() end

function empty(container)
	if type(container) == "function" then
		for i in container do
			return false
		end
		return true
	end
	
	assert(type(container) == "table")
	
	if container[1] then
		return false
	end
	
	for i, j in pairs(container) do
		return false
	end
	
	return true
end

function wait_game(time_to_wait)
	verify_if_thread_is_running()
	if not time_to_wait then
		coroutine.yield()
	else
		local time_to_stop = game.time() + time_to_wait
		while game.time() <= time_to_stop do
			coroutine.yield()
		end
	end
end

function wait(time_to_wait)
	verify_if_thread_is_running()
	if not time_to_wait then
		coroutine.yield()
	else
		local time_to_stop = time_global() + time_to_wait
		while time_global() <= time_to_stop do
			coroutine.yield()
		end
	end
end

function action(obj, ...)
	local arg = {...}
	local act = entity_action()
	local i = 1
	while true do
		if arg[i] then
			act:set_action(arg[i])
		else
			break
		end
		i = i + 1
	end
	if obj then
		obj:command(act, false)
	end
	return entity_action(act)
end

function action_first(obj, ...)
	local arg = {...}
	local act = entity_action()
	local i = 1
	while true do
		if arg[i] then
			act:set_action(arg[i])
		else
			break
		end
		i = i + 1
	end
	if obj then
		obj:command(act, true)
	end
	return entity_action(act)
end

function round(value)
	local min = math.floor(value)
	local max = min + 1
	if value - min > max - value then return max end
	return min
end

function distance_between(obj1, obj2)
	return obj1:position():distance_to(obj2:position())
end

-- eсли один объект nil, например нет актера, то считаем, что он далеко
function distance_between_safe(obj1, obj2)
	if not obj1 or not obj2 then return 100000 end
	return obj1:position():distance_to(obj2:position())
end

local aa = nil
-- проверка на инфопоршни, даже если игрока не существует
function has_alife_info(info_id)
	if not aa then return false end
	return aa:has_info(0, info_id)
end

function reset_action(npc, script_name)
	if npc:get_script() then
		 npc:script(false, script_name)
	end
	npc:script(true, script_name)
end

--]] -----------------------------------------------------------------------------------------------
--/								Functions and variables added by Zmey
--]] -----------------------------------------------------------------------------------------------
-- константа, которую использовать в местах, где нужно задать неограниченное время действия
time_infinite = 100000000

-- если в данный момент выполняется какое-то действие, прерывает его и отключает скриптовый режим
function interrupt_action(who, script_name)
	if who:get_script() then
		who:script(false, script_name)
	end
end

function random_choice(...)
	local arg = {...}
	local r = math.random(1, #arg)
	return arg[r]
end

function if_then_else(cond, if_true, if_false)
	return cond and if_true or if_false
end

function set_current_time(hour, min, sec)
	local current_time_factor = level.get_time_factor()
	local current_time = game.time()
	local c_day = math.floor(current_time / 86400000)
	local c_time = current_time - c_day * 86400000
	local n_time = (sec + min * 60 + hour * 3600) * 1000

	if c_time > n_time then c_day = c_day + 1 end
	n_time = n_time + c_day * 86400000
	level.set_time_factor(10000)
	while game.time() < n_time do wait() end
	level.set_time_factor(current_time_factor)
end

function random_number(min_value, max_value)
	math.randomseed(device():time_global())
	if not min_value and not max_value then
		return math.random()
	else
		return math.random(min_value, max_value)
	end
end

function parse_names(s)
	local t = {}
	for name in string.gfind(s, "([%w_\\]+)%p*") do
		--for name in string.gfind( s, "%s*([^%,]+)%s*" ) do
		table.insert(t, name)
	end
	return t
end

function parse_key_value(s)
	local t = {}
	if not s then return nil end
	local key, nam = nil, nil
	for name in string.gfind(s, "([%w_\\]+)%p*") do
		if not key then
			key = name
		else
			t[key] = name
			key = nil
		end
	end
	return t
end

function parse_nums(s)
	local t = {}
	for entry in string.gfind(s, "([%-%d%.]+)%,*") do
		table.insert(t, tonumber(entry))
	end
	return t
end

-- Находится ли обьект в онлайне.
function is_object_online(obj_id)
	return level.object_by_id(obj_id) ~= nil
end

function get_clsid(npc)
	if not npc then return nil end
	return npc:clsid()
end

-- Вычисляет yaw в радианах
function yaw(v1, v2)
	return math.acos(((v1.x * v2.x) + (v1.z * v2.z)) / (math.sqrt(v1.x * v1.x + v1.z * v1.z) * math.sqrt(v2.x * v2.x + v2.z * v2.z)))
end
function yaw_degree(v1, v2)
	return (math.acos(((v1.x * v2.x) + (v1.z * v2.z)) / (math.sqrt(v1.x * v1.x + v1.z * v1.z) * math.sqrt(v2.x * v2.x + v2.z * v2.z))) * 57.2957)
end
function yaw_degree3d(v1, v2)
	return (math.acos((v1.x * v2.x + v1.y * v2.y + v1.z * v2.z) / (math.sqrt(v1.x * v1.x + v1.y * v1.y + v1.z * v1.z) * math.sqrt(v2.x * v2.x + v2.y * v2.y + v2.z * v2.z))) * 57.2957)
end
function vector_cross(v1, v2)
	return vector():set(v1.y  * v2.z  - v1.z  * v2.y, v1.z  * v2.x  - v1.x  * v2.z, v1.x  * v2.y  - v1.y  * v2.x)
end

-- Поворачивает вектор вокруг оси y против часовой стрелке.
function vector_rotate_y(v, angle)
	angle = angle * 0.017453292519943295769236907684886
	local c = math.cos(angle)
	local s = math.sin(angle)
	return vector():set(v.x * c - v.z * s, v.y, v.x * s + v.z * c)
end

-- очистка таблицы.
function clear_table(t)
	while #t > 0 do
		table.remove(t, #t)
	end
end

function stop_play_sound(obj)
	if obj:alive() then -- == true 
		obj:set_sound_mask(-1)
		obj:set_sound_mask(0)
	end
end

-- Печатает таблицу как дерево.
function print_table(table, title)
	title = title or ""
	for k, v in pairs(table) do
		if type(v) == "table" then
			printf(title .. ".%s:", tostring(k))
			print_table(v, title .. "    ")
		elseif type(v) == "function" then
			printf(title .. "%s:function", tostring(k))
		elseif type(v) == "userdata" then
			printf(title .. "%s:userdata", tostring(k))
		elseif type(v) == "boolean" then
			if v then
				if type(k) ~= "userdata" then
					printf(title .. "%s:true", tostring(k))
				else
					printf(title .. "userdata:true")
				end
			else
				if type(k) ~= "userdata" then
					printf(title .. "%s:false", tostring(k))
				else
					printf(title .. "userdata:false")
				end
			end
		else
			if v then
				printf(title .. "%s:%s", tostring(k), v)
			else
				printf(title .. "%s:nil", tostring(k), v)
			end
		end
	end
end

function store_table(table, title)
	title = title or ""
	_log(title .. "{")
	for k, v in pairs(table) do
		if type(v) == "table" then
			_log(title .. ".%s = ", tostring(k))
			store_table(v, title .. "    ")
		elseif type(v) == "function" then
			_log(title .. ".%s = \"func\",", tostring(k))
		elseif type(v) == "userdata" then
			_log(title .. ".%s = \"userdata\",", tostring(k))
		elseif type(v) == "string" then
			_log(title .. ".%s = \"%s\",", tostring(k), tostring(v))
		else
			_log(title .. ".%s = %s,", tostring(k), tostring(v))
		end
	end
	_log(title .. "},")
end

-------------------------------------------------------------------------------------------
function IsMonster(object, class_id)
	class_id = class_id or get_clsid(object)
	return monster_classes[class_id] == true
end
function IsStalker(object, class_id)
	class_id = class_id or get_clsid(object)
	return stalker_classes[class_id] == true
end
function IsWeapon(object, class_id)
	class_id = class_id or get_clsid(object)
	return weapon_classes[class_id] == true
end
function IsArtefact(object, class_id)
	class_id = class_id or get_clsid(object)
	return artefact_classes[class_id] == true
end
function IsOutfit(object, class_id)
	class_id = class_id or get_clsid(object)
	return outfit_classes[class_id] == true
end
function IsItem(object, class_id)
	class_id = class_id or get_clsid(object)
	return item_classes[class_id] == true
end

-- @deprecated Use IsWeapon instead
function isWeapon(object, class_id)
	--log("~ isWeapon deprecated use IsWeapon instead")
	return IsWeapon(object, class_id)
end

-- @deprecated Use IsArtefact instead
function isArtefact(object, class_id)
	--log("~ isArtefact deprecated use IsArtefact instead")
	return IsArtefact(object, class_id)
end

-- @deprecated Use IsOutfit instead
function isOutfit(object, class_id)
	--log("~ isOutfit deprecated use IsOutfit instead")
	return IsOutfit(object, class_id)
end

-- @deprecated Use IsItem instead
function isItem(object, class_id)
	--log("~ isItem deprecated use IsItem instead")
	return IsItem(object, class_id)
end

-------------------------------------------------------------------------------------------
function get_object_community(obj)
	if type(obj.id) == "function" then
		return character_community(obj)
	else
		return alife_character_community(obj)
	end
end

function character_community(obj)
	if IsStalker(obj) then
		return obj:character_community()
	end
	return "monster"
end

function alife_character_community(obj)
	if IsStalker(obj, obj:clsid()) then
		return obj:community()
	end
	return "monster"
end

-- получить геймобжект по стори_айди.
function level_object_by_sid(sid)
	local sim = alife()
	if sim then
		local s_obj = sim:story_object(sid)
		if s_obj then
			return level.object_by_id(se_obj.id)
		end
	end
	return nil
end
-- Получить айдишник обьекта по стори айди.
function id_by_sid(sid)
	local sim = alife()
	if sim then
		local se_obj = sim:story_object(sid)
		if se_obj then
			return se_obj.id
		end
	end
	return nil
end

function set_inactivate_input_time(delta)
	db.storage[db.actor:id()].disable_input_time = game.get_game_time()
	db.storage[db.actor:id()].disable_input_idle = delta
	level.disable_input()
end

-- проверяет целую часть числа на нечетность
function odd(x)
	return math.floor(x * 0.5) * 2 == math.floor(x)
end

-- находится ли NPC во фруструме игрока
function npc_in_actor_frustrum(npc)
	local actor_dir = device().cam_dir
	--local actor_dir = db.actor:direction()
	local npc_dir = npc:position():sub(db.actor:position())
	local yaw = yaw_degree3d(actor_dir, npc_dir)
	return yaw < 35
end

function start_game_callback()
	aa = alife()

	squad_community_by_behaviour = {
		["stalker"]							= "stalker",
		["bandit"]							= "bandit",
		["dolg"]							= "dolg",
		["freedom"]							= "freedom",
		["army"]							= "army",
		["ecolog"]							= "ecolog",
		["killer"]							= "killer",
		["zombied"]							= "zombied",
		["monolith"]						= "monolith",
		--["csky"]							= "csky",
		--["arena_enemy"]						= "arena_enemy",
		--["arena_friend"]					= "arena_friend",
		["monster"]							= "monster",
		["monster_predatory_day"]			= "monster",
		["monster_predatory_night"]			= "monster",
		["monster_vegetarian"]				= "monster",
		["monster_zombied_day"]				= "monster",
		["monster_zombied_night"]			= "monster",
		["monster_special"]					= "monster"
	}

	monster_classes = {
		[clsid.bloodsucker_s] 				= true,
		[clsid.boar_s] 						= true,
		[clsid.dog_s] 						= true,
		[clsid.flesh_s] 					= true,
		[clsid.pseudodog_s] 				= true,
		[clsid.burer_s] 					= true,
		[clsid.chimera_s] 					= true,
		[clsid.controller_s] 				= true,
		--[clsid.fracture_s] 				= true,
		[clsid.poltergeist_s] 				= true,
		[clsid.gigant_s] 					= true,
		--[clsid.zombie_s] 					= true,
		[clsid.snork_s] 					= true,
		[clsid.tushkano_s] 					= true,
		[clsid.psy_dog_s] 					= true,
		[clsid.psy_dog_phantom_s] 			= true
	}

	stalker_classes = {
		[clsid.script_actor] 				= true,
		[clsid.script_stalker] 				= true
	}

	weapon_classes = {
		[clsid.wpn_vintorez_s] 				= true,
		[clsid.wpn_ak74_s] 					= true,
		[clsid.wpn_lr300_s] 				= true,
		[clsid.wpn_hpsa_s] 					= true,
		[clsid.wpn_pm_s] 					= true,
		[clsid.wpn_shotgun_s] 				= true,
		[clsid.wpn_auto_shotgun_s]			= true,
		[clsid.wpn_bm16_s] 					= true,
		[clsid.wpn_svd_s] 					= true,
		[clsid.wpn_svu_s] 					= true,
		[clsid.wpn_rg6_s] 					= true,
		[clsid.wpn_rpg7_s] 					= true,
		[clsid.wpn_val_s] 					= true,
		[clsid.wpn_walther_s] 				= true,
		[clsid.wpn_usp45_s] 				= true,
		[clsid.wpn_groza_s] 				= true,
		[clsid.wpn_knife_s] 				= true,
		[clsid.wpn_grenade_f1_s] 			= true,
		[clsid.wpn_grenade_rgd5_s] 			= true,
		[clsid.wpn_grenade_launcher] 		= true,
		[clsid.wpn_grenade_fake] 			= true
	}

	artefact_classes = {
		--[clsid.art_bast_artefact] 		= true,
		--[clsid.art_black_drops] 			= true,
		--[clsid.art_dummy] 				= true,
		--[clsid.art_electric_ball] 		= true,
		--[clsid.art_faded_ball] 			= true,
		--[clsid.art_galantine] 			= true,
		--[clsid.art_gravi] 				= true,
		--[clsid.art_gravi_black] 			= true,
		--[clsid.art_mercury_ball] 			= true,
		--[clsid.art_needles] 				= true,
		--[clsid.art_rusty_hair] 			= true,
		--[clsid.art_thorn] 				= true,
		--[clsid.art_zuda] 					= true,
		[clsid.artefact] 					= true
		--[clsid.artefact_s] 				= true
	}
		
	outfit_classes = {
		--[clsid.equ_exo]					= true,
		--[clsid.equ_military]				= true,
		--[clsid.equ_scientific]			= true,
		--[clsid.equ_stalker_s]				= true,
		--[clsid.helmet]					= true
	}
		
	item_classes = {
		--[clsid.obj_antirad_s]				= true,
		--[clsid.obj_attachable]			= true,
		--[clsid.obj_bandage_s]				= true,
		--[clsid.obj_bottle_s]				= true,
		--[clsid.obj_explosive_s]			= true,
		--[clsid.obj_food_s]				= true,
		--[clsid.obj_medkit_s]				= true
	}
		
	
	smart_names.init_smart_names_table()
	task_manager.clear_task_manager()
	sound_theme.load_sound()
	xr_sound.start_game_callback()
	dialog_manager.fill_phrase_table()
	xr_s.init()
	sim_objects.clear()
	sim_board.clear()
	sr_light.clean_up()
	pda.add_quick_slot_items_on_game_start()
	-- Tестирование оптимизации
	--local test_object = test_object.test_object_class()
	--test_object:test()
	--  OXY  -------------------------
		debug_values = GetIniSection("debug_values", "mod_configs.ltx", "bool")
		debug_scripts = GetIniSection("debug_scripts", "mod_configs.ltx")
		_s.InitModules()
	--  OXY  -------------------------
end

-- Усталость
function on_actor_critical_power()
end

function on_actor_critical_max_power()
end

-- Кровотечение
function on_actor_bleeding()
end

function on_actor_satiety()
end

-- Радиация
function on_actor_radiation()
end

-- Заклинило оружие
function on_actor_weapon_jammed()
end

-- не может ходить изза веса
function on_actor_cant_walk_weight()
end

-- пси воздействие
function on_actor_psy()
end

function give_info(info)
	db.actor:give_info_portion(info)
end
function disable_info(info)
	if has_alife_info(info) then
		db.actor:disable_info_portion(info)
	end
end

function create_ammo(section, position, lvi, gvi, pid, num)
	local ini = system_ini()

	local num_in_box = ini:r_u32(section, "box_size")
	local t = {}
	while num > num_in_box do
		local obj = alife():create_ammo(section, position, lvi,	gvi, pid, num_in_box)
		table.insert(t, obj)
		num = num - num_in_box
	end
	local obj = alife():create_ammo(section, position, lvi,	gvi, pid, num)
	table.insert(t, obj)
	return t
end

quest_section = {} -- TODO check for use
-- преобразует строку в соответствии со значением
function get_param_string(src_string, obj)
	local script_ids = db.script_ids[obj:id()]
	local out_string, num = string.gsub(src_string, "%$script_id%$", tostring(script_ids))
	if num > 0 then
		return out_string, true
	else
		return src_string, false
	end
end

local save_markers = {}

-- Функции для проверки корректности сейв лоад
function set_save_marker(p, mode, check, prefix)

	-- определяем ключ маркера.
	local result = ""
	result = result .. "_" .. prefix

	if check then
		if not save_markers[result] then
			abort("Trying to check without marker %s", result)
		end

		if mode == "save" then
			local dif = p:w_tell() - save_markers[result]
			printf(result .. ": SAVE DIF: %s", dif)
			if dif >= 8000 then
				printf("WARNING! may be this is problem save point")
			end
			if dif >= 10240 then
--				abort("You are saving too much")
			end
			p:w_u16(dif)
		else
			local c_dif = p:r_tell() - save_markers[result]
			local dif = p:r_u16()
			 if dif ~= c_dif then
			 	abort("INCORRECT LOAD [%s].[%s][%s]", result, dif, c_dif)
			 else
			 	printf(result .. ": LOAD DIF: %s", dif)
			 end
		end
		return
	end

	if mode == "save" then
		printf(result .. ": set save marker: %s", p:w_tell())
		save_markers[result] = p:w_tell()
		if p:w_tell() > 16000 then
			abort("You are saving too much")
		end
	else
		printf(result .. ": set load marker: %s", p:r_tell())
		save_markers[result] = p:r_tell()
	end

end
-- переводит вектор в строку.
function vec_to_str(vector)
	if not vector then return "nil" end
	return string.format("[%s:%s:%s]", vector.x, vector.y, vector.z)
end

-- меняет team:squad:group обьекта.
function change_team_squad_group(se_obj, team, squad, group)
	local cl_obj = db.storage[se_obj.id] and db.storage[se_obj.id].object
	if cl_obj then
		cl_obj:change_team(team, squad, group)
	else
		se_obj.team = team
		se_obj.squad = squad
		se_obj.group = group
	end
end

-- Story_ID -------------------------------------------------------------
function add_story_object(obj_id, story_obj_id)
	story_objects.get_story_objects_registry():register(obj_id, story_obj_id)
end

function get_story_object(story_obj_id)
	local obj_id = story_objects.get_story_objects_registry():get(story_obj_id)
	if not obj_id then return nil end
	return (db.storage[obj_id] and db.storage[obj_id].object) or (level and level.object_by_id(obj_id))
end

function get_object_story_id(obj_id)
	return story_objects.get_story_objects_registry():get_story_id(obj_id)
end

function get_story_object_id(story_obj_id)
	return story_objects.get_story_objects_registry().id_by_story_id[story_obj_id]
end

function unregister_story_object_by_id(obj_id)
	story_objects.get_story_objects_registry():unregister_by_id(obj_id)
end

function unregister_story_id(story_id)
	story_objects.get_story_objects_registry():unregister_by_story_id(story_id)
end

-- Story_ID -------------------------------------------------------------
-- Получить сквад обьекта!!!!!
function get_object_squad(object)
	if not object then abort("You are trying to get squad_object from NIL object!!!") end
	local obj_id = nil
	if type(object.id) == "function" then
		obj_id = object:id()
	else
		obj_id = object.id
	end
	local se_obj = alife():object(obj_id)
	if se_obj and se_obj.group_id ~= 65535 then
		return alife():object(se_obj.group_id)
	end
	return nil
end

function get_story_squad(story_id)
	local squad_id = get_story_object_id(story_id)
	return squad_id and alife():object(squad_id)
end

-- Проверка по временному интервалу.
function in_time_interval(val1, val2)
	local game_hours = level.get_time_hours()
	if val1 >= val2 then
		return game_hours < val2 or game_hours >= val1
	else
		return game_hours < val2 and game_hours >= val1
	end
end

function show_all_ui(show)
	local hud = get_hud()
	if show then
		level.show_indicators()
--	    db.actor:restore_weapon()
		db.actor:disable_hit_marks(false)
		hud:show_messages()
	else
		if db.actor:is_talking() then
			db.actor:stop_talk()
		end
		level.hide_indicators_safe()
		hud:HideActorMenu()
		hud:HidePdaMenu()
		hud:hide_messages()
--	    db.actor:hide_weapon()
		db.actor:disable_hit_marks(true)
	end
end

--]] -----------------------------------------------------------------------------------------------
--/								Global Functions for OXY
--]] -----------------------------------------------------------------------------------------------
--[[---------------------------------------------------------------
--// 						Ini
--]]---------------------------------------------------------------
--[[
--	Read***(section, line, ini)
--	функции предназначены для чтения значений
--	@param	string	section имя секции
--	@param	string	line 	имя строки
--	@param	string	ini 	ini file
-- 	@return	boolen/string/number/vector
--]]
function ReadBool(section, line, ini)
	if not ini then ini = system_ini() end
	return ini:r_bool(section, line)
end

function ReadString(section, line, ini)
	if not ini then ini = system_ini() end
	return ini:r_string(section, line)
end

function ReadStringWq(section, line, ini)
	if not ini then ini = system_ini() end
	return ini:r_string_wq(section, line)
end

function ReadFloat(section, line, ini)
	if not ini then ini = system_ini() end
	return ini:r_float(section, line)
end

function ReadVector(section, line, ini)
	if not ini then ini = system_ini() end
	return ini:r_vector(section, line)
end

function ReadNum(section, line, ini)
	if not ini then ini = system_ini() end
	return ini:r_u32(section, line)
end

function ReadLine(section, line, ini)
	if not ini then ini = system_ini() end
	return ini:r_line(section, line, "", nil)
end

--[[
--	Проверка существования секции в файле
--	@param	string	section имя секции
--	@param	string	ini  	ini file
-- 	@return	boolen
--]]
function IsSectionExist(section, ini)
	if not ini then ini = system_ini() end
	return ini:section_exist(section)
end

--[[
--	функции предназначены для получения значений
--	@param	string	section имя секции
--	@param	string	line 	имя строки
--	@param	string	ini  	ini file
-- 	@return	boolen
--]]
function IsLineExist(section, line, ini)
	if not ini then ini = system_ini() end
	local exist = ini:line_exist(section, line)
	if not exist then
		log(string.format("~ line [%s] not exist in section [%s]", line, section))
	end
	return exist
end

--[[
--	функции предназначены для получения значений
--	@param	string	section имя секции
--	@param	string	ini  	ini file
-- 	@return	boolen
--]]
function GetLineCount(section, ini)
	if not ini then ini = system_ini() end
	return ini:line_count(section)
end

--[[
--	@param	string section имя секции(через system_ini())
-- 	@return	string/number
--]]
function GetItemName(section)
	if IsLineExist(section, "inv_name") then
		return ReadString(section, "inv_name")
	end
end

function GetItemDescription(section)
	if IsLineExist(section, "description") then
		return ReadString(section, "description")
	end
end

function GetItemIconX(section)
	if IsLineExist(section, "inv_grid_x") then
		return ReadNum(section, "inv_grid_x")
	end
end

function GetItemIconY(section)
	if IsLineExist(section, "inv_grid_y") then
		return ReadNum(section, "inv_grid_y")
	end
end

function GetItemIconWidth(section)
	if IsLineExist(section, "inv_grid_width") then
		return ReadNum(section, "inv_grid_width")
	end
end

function GetItemIconHeight(section)
	if IsLineExist(section, "inv_grid_height") then
		return ReadNum(section, "inv_grid_height")
	end
end

function GetItemWeight(section)
	if IsLineExist(section, "inv_weight") then
		return ReadFloat(section, "inv_weight")
	end
end

function GetItemCost(section)
	if IsLineExist(section, "cost") then
		return ReadNum(section, "cost")
	end
end

function GetItemSlot(section)
	if IsLineExist(section, "slot") then
		return ReadNum(section, "slot")
	end
end

function GetItemBoxSize(section)
	if IsLineExist(section, "box_size") then
		return ReadNum(section, "box_size")
	end
end

function GetItemBoostTime(section)
	if IsLineExist(section, "boost_time") then
		return ReadFloat(section, "boost_time")
	end
end

--]] -----------------------------------------------------------------------------------------------
--/											DBG Function
--]] -----------------------------------------------------------------------------------------------
function CheckDebugScripts()
	local debug_scripts = GetIniSection("debug_scripts", "mod_configs.ltx")
	local exist_msg, error_msg
	for i = 1, #debug_scripts do
		local exist = true
		if not getFS():exist("$game_scripts$", debug_scripts[i] .. ".script") then
			if debug_scripts[i] ~= "_dbg" then
				exist_msg = "File gamedata\\scripts\\" .. debug_scripts[i] .. ".script" .. " not exist!!!"
				exist = false
			end
		end
		if exist and not _G[debug_scripts[i]] then
			error_msg = "Script " .. debug_scripts[i] .. " contains syntax errors!!!"
		end
	end
	return {exist_msg, error_msg}
end

--[[
-- 	Получает ini секцию в таблицу, с заданым типом
-- 	@param	string	section	название секции в ини файле.
-- 	@param	table 	...		(путь)Имя файла/Тип таблици(оба параметра не обязательны).
-- 	@return	table
--
--	TODO после завершения отладки перетащить!!!!!!
--]]
function GetIniSection(section, ...)
	local return_table = {}
	local args = {...}
	local ltx, return_type
	if next(args) then
		for i = 1, 2 do
			if tostring(args[i]):match('(.+)%.(%w+)') then
				ltx = ini_file(args[i])
			else
				return_type = args[i]
			end
		end
	end
	ltx = ltx or system_ini()
	if IsSectionExist(section, ltx) then
		local res, key, value, s
		if return_type then s = "" end
		for i = 0, GetLineCount(section, ltx) - 1 do
			res, key, value = ltx:r_line(section, i, "", s)
			key = tostring(key)
			if return_type == nil then 									-- в таблицу только одиночные значения
				table.insert(return_table, key)
			elseif return_type == "matrix" then 						-- матрица
				table.insert(return_table, {key, value})
			elseif return_type == "string" then 						-- таблица со строками
				return_table[key] = value
			elseif return_type == "number" then 						-- таблица с числами
				return_table[key] = tonumber(value)
			elseif return_type == "true" and return_type == value then 	-- таблица с true
				return_table[key] = true
			elseif return_type == "bool" then							-- таблица с bool
				if value and (value == true or value == "true") then
					return_table[key] = true
				else
					return_table[key] = false
				end
			end
		end
		return return_table
	end
end

-- проверка запущена ли игра
-- deprecated Use IsGameStarted instead
function CheckGameRun()
	log("~ CheckGameRun is deprecated use IsGameStarted instead")
	return IsGameStarted()
end

-- Зпущена ли игра 
function IsGameStarted()
	return level.present() and db.actor and db.actor:alive()
end