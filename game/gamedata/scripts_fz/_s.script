--[[ ------------------------------------------------------------------------------------------------
 File       : _s_sandbox.script
 Description: Система, позволяющая организовывать event-driven модель с делегированием событий
 Copyright  : 2012-2014 © FrostyTech
 Author     : Viнt@rь (по материалам xStream - xs_sandbox)
 Last edit  : 31.05.2018 (Viнt@rь)
--]] ------------------------------------------------------------------------------------------------
-- prefetch("_s_utils") -- подключение модулЯ
-- local log function for implementing enabling/disabling logging for script
-- TODO в релиз не совать!!!!!!!!!!
local _log = function(msg, ...)
	if debug_values["debug_init"] then
		if ReadVar(script_name(), true) then
			_log(msg, ...)
		end
	end
end
--]] ------------------------------------------------------------------------------------------------
--/											Variables
--]] ------------------------------------------------------------------------------------------------
local events = {}			-- calback links storage
local events_process = {}	-- triggered events debug
--]] ------------------------------------------------------------------------------------------------
--/											Initialize
--]] ------------------------------------------------------------------------------------------------
function Init()
	if inited then return end
	inited = true

	_log("* initializing script _s.script")
	
	_G.event = this.CEvent -- translate "CEvent" class to global scope
	event("ActorDeath"):register(OnActorDeath)
end
--]] ------------------------------------------------------------------------------------------------
--/											Functions
--]] ------------------------------------------------------------------------------------------------
local function Register(event_name, func)
	local callbacks = event_name and events[event_name]
	if callbacks then 
		local func, bind = GetFunction(func)
		if func then
			table.insert(callbacks, {func = func, bind = bind})
			--_log("* function %s registered for event %s", func, event_name)
		else
			_log("! function %s ", (not func and " is nil") or (type(func) ~= "function" and "type[" .. type(func) .. "] ~= function") or " is invalid")
		end
	else
		_log("! %s", (not event_name and " event_name = nil") or (not events[event_name] and "events[" .. event_name .. "] = nil"))
	end
end

local function Unregister(event_name, func)
	local callbacks = event_name and events[event_name]
	if callbacks then
		local func = GetFunction(func)
		if func then
			local index = 1
			while callbacks[index] do
				if rawequal(func, callbacks[index].func) then
					table.remove(callbacks, index)
					--_log("- function %s unregistered from event %s", func, event_name)
				else
					index = index + 1
				end
			end
		else
			_log("! function %s ", (not func and " is nil") or (type(func) ~= "function" and "type[" .. type(func) .. "] ~= function") or " is invalid")
		end
	else
		_log("! %s", (not event_name and " event_name = nil") or (not events[event_name] and "events[" .. event_name .. "] = nil"))
	end
end

local function Trigger(event)
	local callbacks = event:name() and events[event:name()]
	
	if callbacks and next(callbacks) then
		events_process[#events_process + 1] = event -- for hang debug (set for note)
		
		local index = 1
		while callbacks[index] and not event.__break do -- цикл обработки события
			if callbacks[index].bind then
				callbacks[index].func(callbacks[index].bind, event)
			else
				callbacks[index].func(event)
			end
			
			if event.__remove then
				event.__remove = nil
				table.remove(callbacks, index) -- remove collected callbacks from stack (отписка)
			else
				index = index + 1
			end
		end
		
		events_process[#events_process] = nil -- for hang debug
		
		if event.__once then
			events[event:name()] = nil
		end
	end
end

local function HangingCallbacks() -- проверка: имеетсЯ незавершенное событие?
	local _precondition = function()
		return next(events_process)
	end
	local _action = function()
		for i, event in ipairs(events_process) do
			_log("! event[%d][%s][%s] is hanged callback", i, event:name(), event.__note or "")
		end
		
		--[[local hud = get_hud()
		local hud_static = hud:GetCustomStatic("sh_err")
		if not hud_static then
			hud:AddCustomStatic("sh_err", true)
			hud_static = hud:GetCustomStatic("sh_err"):wnd()
		end
		hud_static:TextControl():SetText("ВНИМАНИЕ! ПРОИЗОШЛО ЗАВИСАНИЕ ЛОГИКИ!!!")--]]
		
		--_abort("EvntHangedCB:Lost_Callback(%s)~>FATAL_ERROR!", #events_process)
	end
	--/ устанавливаем сторожевой коллбэк (проверка 'зависших' вызовов)
	level.add_call(_precondition, _action)
end

--* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
-- *			                    			CEvent 		                       	    	      	*
--* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class "CEvent"
function CEvent:__init(event_name)
	if event_name and event_name ~= "" then
		if not events[event_name] then
			events[event_name] = {}
		end
		self.__event_name = event_name
	end
end

-- triggers event
function CEvent:trigger(data)
	if type(data) == "table" then
		for k,v in pairs(data) do 
			self[k] = v 
		end
	end
	Trigger(self)
	return self
end

-- register event callback function
function CEvent:register(func)
	Register(self.__event_name, func)
	return self
end

-- unregister callback
function CEvent:unregister(func)
	Unregister(self.__event_name, func)	
	return self
end

-- debug note
function CEvent:note(note)
	self.__note = note
	return self
end

-- get event name
function CEvent:name()
	return self.__event_name
end

-- flag one run function
function CEvent:once()
	self.__once = true
	return self
end

-- stops callback queue execution
function CEvent:stop()
	self.__break = true
	return self
end

-- remove current calback after execution
function CEvent:remove()
	self.__remove = true
	return self
end
--]] ------------------------------------------------------------------------------------------------
--/										Initialize Modules
--]] ------------------------------------------------------------------------------------------------
function InitModules()
	local modules = GetIniSection("modules", "mod_configs.ltx")
	
	-- register modules to stacks, calls "Init" functions
	if modules then
		for i = 1, #modules do
			if getFS():exist("$game_scripts$", modules[i] .. ".script") then
				if _G[modules[i]] then 
					if _G[modules[i]].Init and type(_G[modules[i]].Init) == "function" then
						_log("* initializing script %s.script", modules[i])
						_G[modules[i]].Init()
					else
						_log("! initializing script %s.script Init() %s", modules[i], (not _G[modules[i]].Init and "not found") or (type(_G[modules[i]].Init) ~= "function" and "type[" .. type(_G[modules[i]].Init) .. "]"))
					end
				else
					_log("! initializing script %s.script contains syntax errors", modules[i])
				end
			else
				_log("! initializing script %s.script not exist", modules[i])
			end
		end
	end

	HangingCallbacks()
end
--]] ------------------------------------------------------------------------------------------------
--/											Callback`s
--]] ------------------------------------------------------------------------------------------------
--[[
--	Callback на смерть актора
--]]
function OnActorDeath()
	_log("* OnActorDeath")
	local camera_direction = device().cam_dir
	db.actor:set_actor_direction(camera_direction.x, camera_direction.y, 0)	-- выравниваем направление взглЯда, чтобы было падение более реалистичным
 	level.add_cam_effector("camera_effects\\surge_02.anm", 2532, false, "")
	CreateGameTimer("level.add_pp_effector('surge_fade.ppe', 2011, false)", 2):Start(true)
	CreateGameTimer("level.add_pp_effector('black.ppe', 4467, false)", 22):Once(false):Start(true)
	xr_effects.disable_ui(db.actor, nil)
end
--]] ------------------------------------------------------------------------------------------------
if not inited then this.Init() end -- initialize
--]] ------------------------------------------------------------------------------------------------