--[[ ------------------------------------------------------------------------------------------------
 File       : _s_storage.script
 Description: alternative storage
 Copyright  : 2012-2014 © FrostyTech
 Author     : Viнt@rь
 Last edit  : 14.06.2018 (Viнt@rь)
--]] ------------------------------------------------------------------------------------------------
--/											Variables
--]] ------------------------------------------------------------------------------------------------
storage = {}

local storage_object

local types = {
	["boolean"] = {
		marker = 1,
		read = function(packet) return packet:r_bool() end,
		write = function(packet, value) packet:w_bool(value) end
	},
	["number"] = {
		marker = 2,
		read = function(packet) return packet:r_float() end,
		write = function(packet, value) packet:w_float(value) end
	},
	["string"] = {
		marker = 3,
		read = function(packet) return packet:r_stringZ() end,
		write = function(packet, value) packet:w_stringZ(value) end
	},
	["table"] = {
		marker = 4,
		read = 	function(packet)
					local table = {}
					local size = packet:r_u8()
					if size > 0 then
						local isList = packet:r_bool()
						for i = 1, size do
							local k = isList and i or packet:r_stringZ()
							table[k] = read(packet)
						end
					end
					return table
				end,
		
		write = function(packet, value)
					local size = table.size(value)
					packet:w_u8(size)
					if size > 0 then
						local isList = table.isList(value)
						packet:w_bool(isList)
						if isList then
							for i = 1, size do
								write(packet, value[i])
							end 
						else
							for k, v in pairs(value) do
								packet:w_stringZ(k)
								write(packet, v)
							end
						end
					end
				end
	}
}
	
local markers = {
	[1] = types.boolean,
	[2] = types.number,
	[3] = types.string,
	[4] = types.table
}
--]] ------------------------------------------------------------------------------------------------
--/											Initialize
--]] ------------------------------------------------------------------------------------------------
function Init()
	event("ActorSave"):register(CreateStorageObject)
	event("ActorLoad"):register(ReleaseStorageObject)
end
--]] ------------------------------------------------------------------------------------------------
--/											Callback`s
--]] ------------------------------------------------------------------------------------------------
function CreateStorageObject()
	ReleaseStorageObject()
	if not storage_object then
		storage_object = alife():create("custom_storage", vector(), 0, 0)
		-- никогда не выйдет в онлайн
    	storage_object:can_switch_online(false)
    	storage_object:can_switch_offline(true)
    end
end

function ReleaseStorageObject()
	if storage_object then
		alife():release(storage_object)
		storage_object = nil
	end
end
--* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
-- *			                    		se_custom_storage		                       			*
--* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class "se_custom_storage" (cse_alife_dynamic_object)
function se_custom_storage:__init(section) super(section)
end

function se_custom_storage:on_register()
	cse_alife_dynamic_object.on_register(self)
end

function se_custom_storage:STATE_Read(packet, size)
	store_table(markers, "markers")
	cse_alife_dynamic_object.STATE_Read(self, packet, size)
	event("StorageLoad"):once():trigger({packet = packet})
	while not packet:r_eof() do
		local k = packet:r_stringZ()
		storage[k] = read(packet)
	end
	event("StorageLoaded"):once():trigger()
end

function se_custom_storage:STATE_Write(packet)
	cse_alife_dynamic_object.STATE_Write(self, packet)
	event("StorageSave"):trigger({packet = packet})
	if next(storage) then
		for k, v in pairs(storage) do
			if v ~= nil then
				packet:w_stringZ(k)
				write(packet, v)
			end
		end
	end
end

function se_custom_storage:can_save()
	return true
end
--]] ------------------------------------------------------------------------------------------------
--/											Functions
--]] ------------------------------------------------------------------------------------------------
function read(packet)
	return markers[packet:r_u8()].read(packet)
end

function write(packet, value)
	local type = type(value)
	type = types[type]
	if type then
		packet:w_u8(type.marker)
		type.write(packet, value)
	else
		_log("! Error saving data. Type [%s] is not supported", type(value))
	end
end