--[[ ------------------------------------------------------------------------------------------------
 File       : _s_timer.script
 Description: timers
 Copyright  : 2012-2014 © FrostyTech
 Author     : Viнt@rь
 Last edit  : 14.06.2018 (Viнt@rь)

TODO сейв не строковых функций -- уже и не вспомню о чем это Я писал ))
TODO установку условиЯ вместо времени -- хз нужно ли
TODO несохраняемые таймера -- хз нужно ли
--]] ------------------------------------------------------------------------------------------------
-- local log function for implementing enabling/disabling logging for script
-- TODO в релиз не совать!!!!!!!!!!
local _log = function(msg, ...)
	if ReadVar(script_name(), true) then
		_log(msg, ...)
	end
end
--]] ------------------------------------------------------------------------------------------------
--/											Variables
--]] ------------------------------------------------------------------------------------------------
local exported
local update_time = 0
local timers = {high = {}, low = {}}
--]] ------------------------------------------------------------------------------------------------
--/											Initialize
--]] ------------------------------------------------------------------------------------------------
function Init()
	event("ActorUpdate"):register(OnActorUpdate)
	event("StorageSave"):register(Save)
	event("StorageLoaded"):register(Load)
	
	_G.CTimer = CTimer
end
--]] ------------------------------------------------------------------------------------------------
--/											Callback`s
--]] ------------------------------------------------------------------------------------------------
function OnActorUpdate()
	if next(timers.high) then
		for id, timer in pairs(timers.high) do
			if timer.__game_type then
				if timer.__trigger_time <= game.get_game_time() then
					timer:Trigger(true)
				end
			else
				if timer.__trigger_time <= time_global() then
					timer:Trigger(true)
				end
			end
		end
	end
	
	if update_time > time_global() then return end
		update_time = time_global() + 2000
		
	if next(timers.low) then
		for id, timer in pairs(timers.low) do
			if timer.__game_type then
				if timer.__trigger_time <= game.get_game_time() then
					timer:Trigger()
				end
			else
				if timer.__trigger_time <= time_global() then
					timer:Trigger()
				end
			end
		end
	end
end

function Save()
	local save = {high = {}, low = {}}
	if next(timers.high) then
		for id, timer in pairs(timers.high) do
			timer:Save(save.high)
		end
	end
	if next(timers.low) then
		for id, timer in pairs(timers.low) do
			timer:Save(save.low)
		end
	end
	if next(save.high) or next(save.low) then
		WriteVar("timers", save)
	end
end

function Load()
	local timers = ReadVar("timers")
	DeleteVar("timers")
	
	if timers then
		if timers.high and next(timers.high) then
			for _, v in pairs(timers.high) do
				CTimer(v.id):Load(v, true)
			end
		end
		if timers.low and next(timers.low) then
			for _, v in pairs(timers.low) do
				CTimer(v.id):Load(v)
			end
		end
	end
end

--* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
-- *			                    			CTimer		                       					*
--* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
class "CTimer"
function CTimer:__init(id)
	self.id = id
	self.__once = true
end

function CTimer:Once(once)
	self.__once = once
	return self
end

function CTimer:AddFunc(func, ...)
	self.__func	= func
	self.__args = {...}
	return self
end

function CTimer:SetInterval(time)
	self.__interval	= time or 0
	return self
end

function CTimer:ReSetTime(time)
	if not self.__game_type then
		self.__trigger_time = time_global() + (time or self.__interval or 0)
	else
		local seconds, milliseconds = math.modf(time or self.__interval or 0)
		local time = game.CTime()
		time:setHMSms(0, 0, seconds, milliseconds)
		self.__trigger_time = game.get_game_time() + time
	end
	return self
end

function CTimer:SetGameType()
	self.__game_type = true
	return self
end

function CTimer:Trigger(priority)
	_log("* updating [%s] timer type [%s], prior [%s], remaining [%s]", self.id, self.__game_type and "game" or "real", priority and "high" or "low", GetRemainingTime(self))
	if type(self.__func) == 'string' then
		if next(self.__args) then
			self.__func = self.__func.."(...)"
		end
		loadstring(self.__func)(unpack(self.__args))
	end
	if not self.__once then
		self:ReSetTime()
	else
		self:Stop()
	end
end

function CTimer:Start(priority)
	self:ReSetTime()
	if priority then
		self.id = self.id or GenerateId(timers.high)
		timers.high[self.id] = self
	else
		self.id = self.id or GenerateId(timers.low)
		timers.low[self.id] = self
	end
end

function CTimer:Stop()
	if timers.high[self.id] then
		timers.high[self.id] = nil
	else
		timers.low[self.id] = nil
	end
end

function CTimer:Save(timers)
	local timer = {
		id = self.id,
		type = self.__game_type,
		once = self.__once,
		interval = self.__interval,
		remaining = GetRemainingTime(self),
		func = self.__func,
		args = self.__args
	}
	
	table.insert(timers, timer)
end

function CTimer:Load(t, priority)
	self.__once = t.once
	self.__interval = t.interval
	self.__game_type = t.type
	self.__func	= t.func
	self.__args = t.args
	
	self:ReSetTime(t.remaining)
	if priority then
		timers.high[self.id] = self
	else
		timers.low[self.id] = self
	end
end
--]] ------------------------------------------------------------------------------------------------
--/											Functions
--]] ------------------------------------------------------------------------------------------------
function GenerateId(table)
	local id = 0
	for index in ipairs(table) do
		if type(index) == 'number' then
			id = index
		end
	end
	return id + 1
end

function GetRemainingTime(timer)
	if timer.__game_type then
		return timer.__trigger_time:diffSec(game.get_game_time())
	else
		return timer.__trigger_time - time_global()
	end
end

function GetTimer(id)
	return timers.high[id] or timers.low[id]
end

function CreateTimer(func, time, name, ...)
	return CTimer(name):AddFunc(func, ...):SetInterval(time)
end

function CreateGameTimer(func, time, name, ...)
	return CreateTimer(func, time, name, ...):SetGameType()
end

--[[-------------------------------------------------------------------------
--/ Интеграция синонимов функций из текущего скрипта в _g.script(tnx Artos)
--]]-------------------------------------------------------------------------
if not exported then
	local funcs = {
		["GetTimer"] = GetTimer,
		["CreateTimer"] = CreateTimer,
		["CreateGameTimer"] = CreateGameTimer
	}
	local module = _G
	setfenv(1, module)
	for k, v in pairs(funcs) do
		module[k] = v
		setfenv(module[k], module)
	end
	exported = true
end
--/--------------------------------------------------------------------------