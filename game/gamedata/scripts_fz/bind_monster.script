--[[ -----------------------------------------------------------------------------------------------------------------
 File       : bind_monster.script
 Description: Биндер монстров
 Copyright  : 2004 © GSC Game World
 Author		: GSC Game World
 Last edit  : 14.06.2018 (by Viнt@rь)
--]] -----------------------------------------------------------------------------------------------------------------
--/							 			Monster binding  - регистрация монстров в биндере
--]] -----------------------------------------------------------------------------------------------------------------
function bind(obj)
	obj:bind_object(CMonsterBinder(obj))
end
--]] -----------------------------------------------------------------------------------------------------------------
--/							 						CLASS CONSTRUCTOR
--]] -----------------------------------------------------------------------------------------------------------------
class "CMonsterBinder" (object_binder)
----------------------------------------------------------------------------------------------------------------------
function CMonsterBinder:__init(obj) super(obj)
	self.loaded = false
end
----------------------------------------------------------------------------------------------------
function CMonsterBinder:reload(section)
	object_binder.reload(self, section)
end
----------------------------------------------------------------------------------------------------
function CMonsterBinder:reinit()
	object_binder.reinit(self)

	db.storage[self.object:id()] = {}
	self.st = db.storage[self.object:id()]

	self.object:set_callback(callback.patrol_path_in_point, self.waypoint_callback, self)
	self.object:set_callback(callback.hit,					self.hit_callback,		self)
	self.object:set_callback(callback.death,				self.death_callback,	self)
	self.object:set_callback(callback.sound, 				self.hear_callback, 	self)
end
----------------------------------------------------------------------------------------------------
function CMonsterBinder:net_spawn(sobj)
	if not object_binder.net_spawn(self, sobj) then
		return false
	end

	local on_offline_condlist = self.st and self.st.overrides and self.st.overrides.on_offline_condlist
	if on_offline_condlist ~= nil then
		xr_logic.pick_section_from_condlist(db.actor, self.object, on_offline_condlist)
	end

	if not self.object:alive() then
		release_body_manager.get_release_body_manager():moving_dead_body(self.object)
		return true
	end
	if alife():object(self.object:id()) == nil then
		return false
	end
	
	db.add_obj(self.object)

	--******************************* Телепорт на первую точку пути работы смарттеррейна...*****************************
	local se_obj = alife():object(self.object:id())
	if db.spawned_vertex_by_id[se_obj.id] ~= nil then
		self.object:set_npc_position(level.vertex_position(db.spawned_vertex_by_id[se_obj.id]))
		db.spawned_vertex_by_id[se_obj.id] = nil
	elseif db.offline_objects[se_obj.id] ~= nil and db.offline_objects[se_obj.id].level_vertex_id ~= nil then
		self.object:set_npc_position(level.vertex_position(db.offline_objects[se_obj.id].level_vertex_id))
	elseif se_obj.m_smart_terrain_id ~= 65535 then
		local smart_terrain = alife():object(se_obj.m_smart_terrain_id)
		if smart_terrain.arriving_npc[se_obj.id] == nil then
			local smart_task = smart_terrain.job_data[smart_terrain.npc_info[se_obj.id].job_id].alife_task
			self.object:set_npc_position(smart_task:position())
		end
	end
	--******************************************************************************************************************

	smart_terrain.setup_gulag_and_logic_on_spawn( self.object, self.st, sobj, modules.stype_mobile, self.loaded)

	--  OXY  -------------------------
	event("MonsterSpawn"):trigger({binder = self, obj = self.object, sobj = sobj})
	--  OXY  -------------------------

	return true
end
----------------------------------------------------------------------------------------------------
function CMonsterBinder:net_destroy()
	self.object:set_callback(callback.death,				nil)
	self.object:set_callback(callback.patrol_path_in_point, nil)
	self.object:set_callback(callback.hit,					nil)
	self.object:set_callback(callback.sound, 				nil)
	
	xr_sound.stop_sounds_by_id(self.object:id())

	xr_combat_ignore.fighting_with_actor_npcs[self.object:id()] = nil
	
	if self.st and self.st.active_scheme then
		xr_logic.issue_event(self.object, self.st[self.st.active_scheme], "net_destroy")
	end

	-- Запоминаем позицию и активную секцию --------
	if db.offline_objects[self.object:id()] then
		db.offline_objects[self.object:id()].level_vertex_id = self.object:level_vertex_id()
		db.offline_objects[self.object:id()].active_section = self.st.active_section
	end
	------------------------------------------------
	
	--  OXY  -------------------------
	event("MonsterDestroy"):trigger({binder = self, obj = self.object})
	--  OXY  -------------------------
	
	db.del_obj(self.object)
	self.st = nil
	object_binder.net_destroy(self)
end
----------------------------------------------------------------------------------------------------------------------
--]] -----------------------------------------------------------------------------------------------------------------
--/							 							UPDATE
--]] -----------------------------------------------------------------------------------------------------------------
function CMonsterBinder:update(delta)
	object_binder.update(self, delta)

	if xr_combat_ignore.fighting_with_actor_npcs[self.object:id()] and self.object:best_enemy() == nil then
		xr_combat_ignore.fighting_with_actor_npcs[self.object:id()] = nil
	end

	local squad = get_object_squad(self.object)
	local object_alive = self.object:alive()
	if not object_alive then
		return
	end

	self.object:set_tip_text("")
	
	if self.st and self.st.active_scheme then
		xr_logic.try_switch_to_another_section(self.object, self.st[self.st.active_scheme], db.actor)
	end
	
	-- Апдейт отряда
	if squad ~= nil then
		if squad:commander_id() == self.object:id() then
			squad:update()
		end
	end

	self.object:info_clear()

	local active_section = self.st and self.st.active_section
	if active_section then
		self.object:info_add("section: " .. active_section)
	end
	local best_enemy = self.object:best_enemy()
	if best_enemy then
		self.object:info_add("enemy: " .. best_enemy:name())
	end
	self.object:info_add(self.object:name().." ["..self.object:team().."]["..self.object:squad().."]["..self.object:group().."]")

	if alife():object(self.object:id()) == nil then
		return
	end

	if squad ~= nil then
		self.object:info_add("squad_id: " .. squad:section_name())
		if squad.current_action ~= nil then
			local target = squad.assigned_target_id and alife():object(squad.assigned_target_id) and alife():object(squad.assigned_target_id):name()
			self.object:info_add("current_action: " .. squad.current_action.name .."["..tostring(target).."]")
		end
	end

	-- Если есть враг, то идем в комбат !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	if self.object:get_enemy() then
		if xr_logic.mob_captured(self.object) then
			xr_logic.mob_release(self.object)
		end
		return
	end

	if squad and squad.current_action and squad.current_action.name == "reach_target" then
		local squad_target = simulation_objects.get_sim_obj_registry().objects[squad.assigned_target_id]
		if squad_target == nil then return end

		local target_pos, target_lv_id, target_gv_id = squad_target:get_location()
		
		xr_logic.mob_capture(self.object, true)
		
		if squad:commander_id() == self.object:id() then
			action(self.object, move(move.walk_with_leader, target_pos),
				cond(cond.move_end))
		else
			local commander_pos = alife():object(squad:commander_id()).position
			if commander_pos:distance_to(self.object:position()) > 10 then
				action(self.object, move(move.run_with_leader, target_pos), cond(cond.move_end))
			else
				action(self.object, move(move.walk_with_leader, target_pos), cond(cond.move_end))
			end
		end
		return
	end

	if self.st.active_section ~= nil then
		xr_logic.issue_event(self.object, self.st[self.st.active_scheme], "update", delta)
	end
	
	--  OXY  -------------------------
	event("MonsterUpdate"):trigger({binder = self, obj = self.object, delta = delta})
	--  OXY  -------------------------
end
----------------------------------------------------------------------------------------------------------------------
--]] -----------------------------------------------------------------------------------------------------------------
--/							 							SAVE/LOAD
--]] -----------------------------------------------------------------------------------------------------------------
function CMonsterBinder:net_save_relevant()
	return true
end
----------------------------------------------------------------------------------------------------
function CMonsterBinder:save(packet)
	set_save_marker(packet, "save", false, "monster_binder")
	object_binder.save(self, packet)
	xr_logic.save_obj(self.object, packet)
	set_save_marker(packet, "save", true, "monster_binder")
end
----------------------------------------------------------------------------------------------------
function CMonsterBinder:load(reader)
	self.loaded = true
	set_save_marker(reader, "load", false, "monster_binder")
	object_binder.load(self, reader)
	xr_logic.load_obj(self.object, reader)
	set_save_marker(reader, "load", true, "monster_binder")
end
----------------------------------------------------------------------------------------------------------------------
--]] -----------------------------------------------------------------------------------------------------------------
--/														Callback`s
--]] -----------------------------------------------------------------------------------------------------------------
function CMonsterBinder:extrapolate_callback()
	-- Проверяем, что объект еще в онлайне
	if not self.st or not self.st.object then
		return
	end

	local oCurPatrol = self.object:get_current_point_index()
	if self.object:get_script()	== false then
		return false
	end

	local oPatrolPath = self.object:patrol()
	if not level.patrol_path_exists(oPatrolPath) then
		return false
	end
	if patrol(oPatrolPath):flags(oCurPatrol):get() == 0 then
		return true
	end
	return false
end
----------------------------------------------------------------------------------------------------
function CMonsterBinder:waypoint_callback(obj, action_type, index)
	if self.st.active_section then
		xr_logic.issue_event(self.object, self.st[self.st.active_scheme], "waypoint_callback", obj, action_type, index)
	end
end
----------------------------------------------------------------------------------------------------
function CMonsterBinder:hit_callback(obj, amount, local_direction, who, bonde_index)
	if who:id() == db.actor:id() then
		xr_statistic.set_best_weapon(amount)
	end

	if self.st.hit then
		xr_logic.issue_event(self.object, self.st.hit, "hit_callback", obj, amount, local_direction, who, bonde_index)
	end
	
	--  OXY  -------------------------
	event("MonsterHit"):trigger({binder = self, obj = obj, amount = amount, local_direction = local_direction, who = who, bonde_index = bonde_index})
	--  OXY  -------------------------
end
----------------------------------------------------------------------------------------------------
function CMonsterBinder:death_callback(victim, who)
	xr_combat_ignore.fighting_with_actor_npcs[self.object:id()] = nil

	self:hit_callback(victim, 1, vector():set(0,0,0), who, "from_death_callback")
	if who:id() == db.actor:id() then
		xr_statistic.inc_killed_monsters_counter()
		xr_statistic.set_best_monster(self.object)
	end

	if self.st.mob_death then
		xr_logic.issue_event(self.object, self.st.mob_death, "death_callback", victim, who)
	end

	if self.st.active_section then
		xr_logic.issue_event(self.object, self.st[self.st.active_scheme], "death_callback", victim, who)
	end
	
	--' Наносим небольшой импульс вперед.
	local h = hit()
	h.draftsman = self.object
	h.type = hit.fire_wound
	h.direction = db.actor:position():sub(self.object:position())
	h:bone("pelvis")
	h.power = 1
	h.impulse = 10
	self.object:hit(h)

	local obj_clsid = self.object:clsid()
	if obj_clsid == clsid.poltergeist_s then
		if alife():object(self.object:id()) ~= nil then
			alife():release(alife():object(self.object:id()), true)
		end
	end
	release_body_manager.get_release_body_manager():moving_dead_body(self.object)
	
	--  OXY  -------------------------
	event("MonsterDeath"):trigger({binder = self, victim = victim, who = who})
	--  OXY  -------------------------
end
----------------------------------------------------------------------------------------------------
function CMonsterBinder:hear_callback(self, who_id, sound_type, sound_position, sound_power)
	if who_id == self:id() then
		return
	end
	xr_hear.hear_callback(self, who_id, sound_type, sound_position, sound_power)
end
----------------------------------------------------------------------------------------------------------------------