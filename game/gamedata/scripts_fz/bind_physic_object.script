--[[ -----------------------------------------------------------------------------------------------------------------
 File       : bind_physic_object.script
 Description: Physic objects binder
 Copyright  : 2004 © GSC Game World
 Author     : Evgeniy Negrobov (Jon) jon@gsc-game.kiev.ua [+ Andrey Fidrya (Zmey) af@svitonline.com]
 Last edit  : 23.10.2012 (by Viнt@rь)
--]] -----------------------------------------------------------------------------------------------------------------
--/														Initialize
--]] -----------------------------------------------------------------------------------------------------------------
function init(oObj)
	local ini = oObj:spawn_ini()
	-- Биндить предмет нет смысла, если у него нет секции logic
	if not (ini and ini:section_exist("logic")) then
		-- Прожектор нужно биндить даже без logic
		if oObj:clsid() ~= clsid.inventory_box then
			return
		end
	end
	oObj:bind_object(CPhysicsBinder(oObj))
end
--]] -----------------------------------------------------------------------------------------------------------------
--/							 						CLASS CONSTRUCTOR
--]] -----------------------------------------------------------------------------------------------------------------
class "CPhysicsBinder" (object_binder)
----------------------------------------------------------------------------------------------------------------------
function CPhysicsBinder:__init(obj) super(obj)
	self.initialized = false
	self.loaded = false
end
----------------------------------------------------------------------------------------------------
function CPhysicsBinder:reload(sSection)
	object_binder.reload(self, sSection)
end
----------------------------------------------------------------------------------------------------
function CPhysicsBinder:reinit()
	object_binder.reinit(self)
	
	db.storage[self.object:id()] = {}
	self.st = db.storage[self.object:id()]
end
----------------------------------------------------------------------------------------------------
function CPhysicsBinder:net_spawn(sObj)
	if not object_binder.net_spawn(self, sObj) then
		return false
	end

	if self.object:section() == "physic_door" then
		db.level_doors[self.object:id()] = self.object:position()
	end

	if self.object:spawn_ini() then
		if self.object:spawn_ini():section_exist("drop_box") then
			self.box_items = xr_box.ph_item_box(self.object)
		end
		if self.object:spawn_ini():section_exist("level_spot") then
			if self.object:spawn_ini():line_exist("level_spot", "actor_box") then
    	        level.map_add_object_spot(self.object:id(), "ui_pda2_actor_box_location", "st_ui_pda_actor_box")
			end
		end
	end
	db.add_obj(self.object)
	
	--  Sp  -------------------------
		event("PhysicsSpawn"):trigger({oBinder=self, oObj=self.object, sObj=sObj})
	--  Sp  -------------------------
	
	return true
end
----------------------------------------------------------------------------------------------------
function CPhysicsBinder:net_destroy()
    if level.map_has_object_spot(self.object:id(), "ui_pda2_actor_box_location") ~= 0 then
        level.map_remove_object_spot(self.object:id(), "ui_pda2_actor_box_location")
    end
    
	xr_sound.stop_sounds_by_id(self.object:id())
	
	--  Sp  -------------------------
		event("PhysicsDestroy"):trigger({oBinder=self, oObj=self.object})
	--  Sp  -------------------------
	
	if self.st.active_scheme then
		xr_logic.issue_event(self.object, self.st[self.st.active_scheme], "net_destroy")
	end
	
	local on_offline_condlist = self.st and self.st.overrides and self.st.overrides.on_offline_condlist
	if on_offline_condlist then
		xr_logic.pick_section_from_condlist(db.actor, self.object, on_offline_condlist)
	end
	
	if self.particle then
		self.particle:stop()
	end
	
	db.del_obj(self.object)
	self.st = nil
	object_binder.net_destroy(self)
end
----------------------------------------------------------------------------------------------------------------------
--]] -----------------------------------------------------------------------------------------------------------------
--/							 							UPDATE
--]] -----------------------------------------------------------------------------------------------------------------
function CPhysicsBinder:update(delta)
	object_binder.update(self, delta)

	if not self.initialized and db.actor then
		self.initialized = true
		xr_logic.initialize_obj(self.object, self.st, self.loaded, db.actor, modules.stype_item)
	end

	self.object:info_clear()
	
	if self.st.active_section then
		self.object:info_add("section: " .. self.st.active_section)
	end
	
	self.object:info_add("name: [" .. self.object:name() .. "] id [" .. self.object:id() .. "]")

	if self.st.active_section or (self.object:spawn_ini() ~= nil and self.object:spawn_ini():section_exist("drop_box") == true) then
		xr_logic.issue_event(self.object, self.st[self.st.active_scheme], "update", delta)
		
		self.object:set_callback(callback.use_object, 	self.use_callback, 	 self)
		self.object:set_callback(callback.hit, 			self.hit_callback, 	 self)
		self.object:set_callback(callback.death, 		self.death_callback, self)
	end
	
	if self.object:clsid() == clsid.inventory_box then
		self.object:set_callback(callback.use_object, 	self.use_callback, 	 self)
	end
	
	xr_sound.update(self.object:id())
	
	--  Sp  -------------------------
		event("PhysicsUpdate"):trigger({oBinder=self, oObj=self.object, delta=delta})
	--  Sp  -------------------------
end
----------------------------------------------------------------------------------------------------------------------
--]] -----------------------------------------------------------------------------------------------------------------
--/							 							SAVE/LOAD
--]] -----------------------------------------------------------------------------------------------------------------
function CPhysicsBinder:net_save_relevant()
	return true
end
----------------------------------------------------------------------------------------------------
function CPhysicsBinder:save(packet)
	object_binder.save(self, packet)
	set_save_marker(packet, "save", false, "physics_binder")
	xr_logic.save_obj(self.object, packet)
	set_save_marker(packet, "save", true, "physics_binder")
end
----------------------------------------------------------------------------------------------------
function CPhysicsBinder:load(reader)
	self.loaded = true
	object_binder.load(self, reader)
	set_save_marker(reader, "load", false, "physics_binder")
	xr_logic.load_obj(self.object, reader)
	set_save_marker(reader, "load", true, "physics_binder")
end
----------------------------------------------------------------------------------------------------------------------
--]] -----------------------------------------------------------------------------------------------------------------
--/														Callback`s
--]] -----------------------------------------------------------------------------------------------------------------
function CPhysicsBinder:use_callback(oObj, oWho)
	--  Sp  -------------------------
		event("PhysicsUse"):trigger({oBinder=self, oObj=self.object, oWho=oWho})
	--  Sp  -------------------------
		
	if self.st.active_section then
		xr_logic.issue_event(self.object, self.st[self.st.active_scheme], "use_callback", oObj, oWho)
	end
end
----------------------------------------------------------------------------------------------------
function CPhysicsBinder:hit_callback(oObj, iAmount, vLocalDir, oWho, iBoneIdx)
	--  Sp  -------------------------
		event("PhysicsHit"):trigger({oBinder=self, oObj=oObj, iAmount=iAmount, vLocalDir=vLocalDir, oWho=oWho, iBoneIdx=iBoneIdx})
	--  Sp  -------------------------
	
	if self.st.ph_on_hit then
		xr_logic.issue_event(self.object, self.st.ph_on_hit, "hit_callback", oObj, iAmount, vLocalDir, oWho, iBoneIdx)
	end
	
	if self.st.active_section then
		xr_logic.issue_event(self.object, self.st[self.st.active_scheme], "hit_callback", oObj, iAmount, vLocalDir, oWho, iBoneIdx)
	end
end
----------------------------------------------------------------------------------------------------
function CPhysicsBinder:death_callback(oVictim, oWho)
	--  Sp  -------------------------
		event("PhysicsDeath"):trigger({oBinder=self, oVictim=oVictim, oWho=oWho})
	--  Sp  -------------------------
	
	if self.st.active_section then
		xr_logic.issue_event(self.object, self.st[self.st.active_scheme], "death_callback", oVictim, oWho)
	end

	if self.particle ~= nil then
		self.particle:stop()
	end

	if self.object:spawn_ini() ~= nil and self.object:spawn_ini():section_exist("drop_box") == true then
		self.box_items:spawn_items()
	end
end
----------------------------------------------------------------------------------------------------------------------