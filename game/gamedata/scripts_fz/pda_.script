--[[ ----------------------------------------------------------------------------------------------- 
 File       : pda.script
 Description: Некторые функции для ПДА
 Copyright  : 2004 © GSC Game World
 Author     : GSC Game World
 Last edit  : 02.11.2014
--]] -----------------------------------------------------------------------------------------------
-- вызывается  1 раз в 3 секунды
function fill_faction_state(state)
	local board = sim_board.get_sim_board()

	state.member_count = 0
	state.resource = 0
	state.power = 0

 	state.actor_goodwill = 3000
	state.name = "ui_inGame2_hint_wnd_bar"
	state.icon = "ui_inGame2_hint_wnd_bar"
	state.icon_big = "logos_big_empty"
	state.target = game.translate_string("ui_st_no_faction")
	state.target_desc = "aaa"
	state.location = "a"

	state.war_state1 = "a"
	state.war_state_hint1 = "1"
	state.war_state2 = "3"
	state.war_state_hint2 = "2"
	state.war_state3 = "33"
	state.war_state_hint3 = ""
	state.war_state4 = "23"
	state.war_state_hint4 = ""
	state.war_state5 = "5"
	state.war_state_hint5 = "5"

	state.bonus = 0
end

--[[
--	int		get_max_member_count();   -- 1 раз в 3 секунды
--	float	get_max_resource();
--	float	get_max_power();
--]]
function get_max_member_count()
	return 10
end

function get_max_resource()
	return 10
end

function get_max_power()
	return 10
end

--[[
--	get_stat(index)
--	@param	int	index индекс
-- 	@return	string
--]]
function get_stat(index)
	if index == 0 then
		return "00:00:00"
	elseif index == 1 then
		return tostring(xr_statistic.actor_statistic.surges)
	elseif index == 2 then
		return tostring(xr_statistic.actor_statistic.completed_quests)
	elseif index == 3 then
		return tostring(xr_statistic.actor_statistic.killed_monsters)
	elseif index == 4 then
		return tostring(xr_statistic.actor_statistic.killed_stalkers)
	elseif index == 5 then
		return tostring(xr_statistic.actor_statistic.artefacts_founded)
	elseif index == 6 then
		return tostring(xr_statistic.actor_statistic.founded_secrets)
	end
end

killed_monsters_tbl = {
	bloodsucker_weak  	= {back = "ui_inGame2_Krovosos", 		icon = ""},
	bloodsucker_normal	= {back = "ui_inGame2_Krovosos_1", 		icon = ""},
	bloodsucker_strong	= {back = "ui_inGame2_Krovosos_2", 		icon = ""},
	boar_weak  			= {back = "ui_inGame2_Kaban_1", 		icon = ""},
	boar_strong			= {back = "ui_inGame2_Kaban", 			icon = ""},
	burer 				= {back = "ui_inGame2_Burer", 			icon = ""},
	chimera 			= {back = "ui_inGame2_Himera", 			icon = ""},
	controller 			= {back = "ui_inGame2_Controller", 		icon = ""},
	dog 				= {back = "ui_inGame2_Blind_Dog", 		icon = ""},
	flesh_weak 			= {back = "ui_inGame2_Flesh", 			icon = ""},
	flesh_strong		= {back = "ui_inGame2_Flesh_1", 		icon = ""},
	gigant 				= {back = "ui_inGame2_Pseudo_Gigant", 	icon = ""},
	poltergeist_tele 	= {back = "ui_inGame2_Poltergeyst", 	icon = ""},
	poltergeist_flame	= {back = "ui_inGame2_Poltergeist_1", 	icon = ""},
	psy_dog_weak  		= {back = "ui_inGame2_PseudoDog_1", 	icon = ""},
	psy_dog_strong		= {back = "ui_inGame2_PseudoDog", 		icon = ""},
	pseudodog_weak 		= {back = "ui_inGame2_PseudoDog_1", 	icon = ""},
	pseudodog_strong	= {back = "ui_inGame2_PseudoDog",  		icon = ""},
	snork 				= {back = "ui_inGame2_Snork", 			icon = ""},
	tushkano 			= {back = "ui_inGame2_Tushkan", 		icon = ""},
	none 				= {back = "", icon = ""}
}

function get_monster_back()
	if not(xr_statistic.actor_statistic.best_monster) or not(killed_monsters_tbl[xr_statistic.actor_statistic.best_monster]) then
		return tostring(killed_monsters_tbl.none.back)
	end
		return tostring(killed_monsters_tbl[xr_statistic.actor_statistic.best_monster].back)
end

function get_monster_icon()
	if not(xr_statistic.actor_statistic.best_monster) or not(killed_monsters_tbl[xr_statistic.actor_statistic.best_monster]) then
		return tostring(killed_monsters_tbl.none.icon)
	end
		return tostring(killed_monsters_tbl[xr_statistic.actor_statistic.best_monster].icon)
end

function get_favorite_weapon()
	if not(xr_statistic.actor_statistic.favorite_weapon_sect) then
		return "wpn_knife"
	end
		return xr_statistic.actor_statistic.favorite_weapon_sect
end

local primary_objects_tbl = {
	{target="cargo_port_mercs_restrictor_combat_out",	hint="cp_name_kpp"},	
	{target="cargo_port_car_belyaev_5",					hint="cp_name_zavod"},
	{target="black_lake_ferma_spot",					hint="black_lake_ferma_spot_tex"},
	{target="black_lake_jama_spot",					    hint="black_lake_jama_spot_tex"},
	{target="black_lake_zapravka_spot",					hint="black_lake_zapravka_spot_tex"},
	{target="black_lake_lake_spot",					    hint="black_lake_lake_spot_tex"},
	{target="black_lake_forest_black_spot",				hint="black_lake_forest_black_spot_tex"},
	{target="black_lake_mil_spot",					    hint="black_lake_mil_spot_tex"},
	{target="black_lake_beach_spot",					hint="black_lake_beach_spot_tex"},
	{target="black_lake_otstoj_spot",					hint="black_lake_otstoj_spot_tex"},
	{target="black_lake_teleport_spot",					hint="black_lake_teleport_spot_tex"},
	{target="black_lake_razlochik_spot",			    hint="black_lake_razlochik_spot_tex"},
	{target="black_lake_pole_spot",					    hint="black_lake_pole_spot_tex"},
	{target="black_lake_baza_spot",					    hint="black_lake_baza_spot_tex"},
	{target="black_lake_bunker_spot",					hint="black_lake_bunker_spot_tex"},
	{target="black_lake_razlom_spot",					hint="black_lake_razlom_spot_tex"},
	{target="black_lake_derevnja_spot",					hint="black_lake_derevnja_spot_tex"},
	{target="black_lake_marsh_spot",					hint="black_lake_marsh_spot_tex"},
	{target="black_lake_klad_spot",					    hint="black_lake_klad_spot_tex"},
	{target="black_lake_zerkov_spot",					hint="black_lake_zerkov_spot_tex"},
	{target="black_lake_bear_spot",					    hint="black_lake_bear_spot_tex"},

}

local change_objects_tbl = {
}

local sleep_zones_tbl = {
}

function fill_primary_objects()
	for k,v in pairs(primary_objects_tbl) do
		local obj_id = get_story_object_id(v.target)
		if(obj_id) then
			level.map_add_object_spot(obj_id, "primary_object", v.hint)
		end
	end
	change_anomalies_names()
	fill_sleep_zones()
end

function fill_sleep_zones()
	for k,v in pairs(sleep_zones_tbl) do
		local obj_id = get_story_object_id(v.target)
		if(obj_id and db.storage[obj_id] and db.storage[obj_id].object) then
			if(db.storage[obj_id].object:position():distance_to(db.actor:position())<=150 and level.map_has_object_spot(obj_id, "ui_pda2_actor_sleep_location")==0) then
				level.map_add_object_spot(obj_id, "ui_pda2_actor_sleep_location", v.hint)
			elseif(db.storage[obj_id].object:position():distance_to(db.actor:position())>150 and level.map_has_object_spot(obj_id, "ui_pda2_actor_sleep_location")~=0) then
				level.map_remove_object_spot(obj_id, "ui_pda2_actor_sleep_location")
			end
		end
	end
end

function add_quick_slot_items_on_game_start()
	local _ini = system_ini()
	local str = utils.cfg_get_string(_ini, "actor", "quick_item_1", db.actor, false, "", "")
	get_console():execute("slot_0 "..str)
	local str = utils.cfg_get_string(_ini, "actor", "quick_item_2", db.actor, false, "", "")
	get_console():execute("slot_1 "..str)
	local str = utils.cfg_get_string(_ini, "actor", "quick_item_3", db.actor, false, "", "")
	get_console():execute("slot_2 "..str)
	local str = utils.cfg_get_string(_ini, "actor", "quick_item_4", db.actor, false, "", "")
	get_console():execute("slot_3 "..str)
end

function change_anomalies_names()
	if has_alife_info("jup_b32_scanner_reward") then
		for k,v in pairs(change_objects_tbl) do
			if has_alife_info(v.group) and not v.enabled then
				v.enabled = true
			end
		end
	end
	if level.name() ~= "jupiter" then
		return
	end
	for k,v in pairs(change_objects_tbl) do
		if v.enabled then
			local obj_id = get_story_object_id(v.target)
			if (obj_id) and (level.map_has_object_spot(obj_id, "primary_object") ~= 0) then
				level.map_remove_object_spot(obj_id, "primary_object")
			end
			local hint = game.translate_string(v.hint).."\\n".." \\n"
			local has_af = false
			local af_table = {}
			has_af, af_table = xr_conditions.anomaly_has_artefact(db.actor, nil, {v.zone})
			if has_af then
				hint = hint..game.translate_string("st_jup_b32_has_af")
				for k,v in pairs(af_table) do
					hint = hint.."\\n"..game.translate_string("st_"..v.."_name")
				end
			else
				hint = hint..game.translate_string("st_jup_b32_no_af")
			end
			if (obj_id) and level.map_has_object_spot(obj_id, "primary_object") == 0 then
				level.map_add_object_spot(obj_id, "primary_object", hint)
			end
		end
	end
end