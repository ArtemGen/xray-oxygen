------------------------------------------------------------------------------
--                      Служебные функции и переменные                      --
------------------------------------------------------------------------------
bool_is_editor_show=false
bool_allspawn_auto_print=false
timer_allspawn_auto_print=0
function ReadVisual(section)
   local ltx = system_ini()
   if ltx:line_exist(section,"visual") then
      return ltx:r_string(section,"visual")
   else
      return "nil"
   end
end
function debug_to_file(filename,text)
   local file=io.open("gamedata\\"..filename,"a+")
   file:write(tostring(text),"\n")
   file:close(file)
end
function give_quick_news(text)
   if db.actor~=nil then
      if text==true then
         news_manager.send_tip(db.actor,"true",0,"mutant_hunter",2000)
      elseif text==false then
         news_manager.send_tip(db.actor,"false",0,"mutant_hunter",2000)
      elseif text==nil then
         news_manager.send_tip(db.actor,"nil",0,"mutant_hunter",2000)
      else
         news_manager.send_tip(db.actor,text,0,"mutant_hunter",2000)
      end
   end
end
function run_choose_box(type,reason,text,extra_value)
   information_block_show(type,reason,text,extra_value)
end
function info_get_boolean(info,inversion)
   if info~=nil then
      if has_alife_info(info) then
         if inversion==true then
            result=false
         else
            result=true
         end
      else
         if inversion==true then
            result=true
         else
            result=false
         end
      end
   end
   return result
end
function info_give_on_boolean(value,info,inversion)
   if value~=nil and info~=nil then
      if value==true then
         if inversion==true then
            disable_info(info)
         else
            give_info(info)
         end
      else
         if inversion==true then
            give_info(info)
         else
            disable_info(info)
         end
      end
   end
end
------------------------------------------------------------------------------
--                         Редактор точек путей                             --
------------------------------------------------------------------------------
waypoint_name="default_walk"
waypoint_points_counter=-1
waypoint_assembly,waypoint_data="",""
waypoint_line_main,waypoint_line_attacher="",""
waypoint_line_1,waypoint_line_2,waypoint_line_3,waypoint_line_4,waypoint_line_5,waypoint_line_6="","","","","",""
class "waypoint_editor" (CUIScriptWnd)
function waypoint_editor:__init(owner) super()
   self.owner = owner
   self:InitControls()
   self:InitCallBacks()
end
function waypoint_editor:__finalize()
end
function waypoint_editor:InitControls()
   self:SetWndRect(Frect():set(0,0,1024,768))
   local xml = CScriptXmlInit()
   xml:ParseFile("ui_editors.xml")
   self.waypoint_editor_form=xml:InitStatic("waypoint_editor_form",self)
   self:Register(xml:Init3tButton("waypoint_editor_form:btn_print_waypoint",self.waypoint_editor_form),"btn_print_waypoint")
   self:Register(xml:Init3tButton("waypoint_editor_form:btn_mark_point",self.waypoint_editor_form),"btn_mark_point")
   self:Register(xml:Init3tButton("waypoint_editor_form:btn_close",self.waypoint_editor_form),"btn_close")
   self.check_way_closed=xml:InitCheck("waypoint_editor_form:check_way_closed",self.waypoint_editor_form)
   self.check_way_closed:SetCheck(info_get_boolean("waypoint_editor_check_way_closed",true))
   self.waypoint_info=xml:InitStatic("waypoint_editor_form:waypoint_info",self.waypoint_editor_form)
   self.waypoint_name_field=xml:InitEditBox("waypoint_editor_form:waypoint_name_field",self.waypoint_editor_form)
   self.point_animation_field=xml:InitEditBox("waypoint_editor_form:point_animation_field",self.waypoint_editor_form)
   self.point_signal_field=xml:InitEditBox("waypoint_editor_form:point_signal_field",self.waypoint_editor_form)
   self:Register(self.waypoint_name_field,"waypoint_name_field")
   self:Register(xml:Init3tButton("waypoint_editor_form:btn_show_waypoint",self.waypoint_editor_form),"btn_show_waypoint")
   if self.waypoint_name_field:GetText()==nil or self.waypoint_name_field:GetText()=="" then
      self.waypoint_name_field:SetText(waypoint_name)
   end
end
function waypoint_editor:InitCallBacks()
   self:AddCallback("btn_show_waypoint",ui_events.BUTTON_CLICKED,self.btn_show_waypoint,self)
   self:AddCallback("btn_print_waypoint",ui_events.BUTTON_CLICKED,self.btn_print_waypoint,self)
   self:AddCallback("btn_mark_point",ui_events.BUTTON_CLICKED,self.btn_mark_point,self)
   self:AddCallback("btn_close",ui_events.BUTTON_CLICKED,self.btn_close,self)
end
function waypoint_editor:Update()
   CUIScriptWnd.Update(self)
   if not db.actor:alive() then
      self:btn_close()
   else
      self.waypoint_info:TextControl():SetText(waypoint_line_main)
   end
   info_give_on_boolean(self.check_way_closed:GetCheck(),"waypoint_editor_check_way_closed",true)
end
function waypoint_editor:OnKeyboard(dik,keyboard_action)
   CUIScriptWnd.OnKeyboard(self,dik,keyboard_action)
   if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
      if dik==DIK_keys.DIK_ESCAPE then
         self:btn_close()
      elseif dik==DIK_keys.DIK_SPACE then
         self:btn_mark_point()
      elseif dik==DIK_keys.DIK_RETURN then
         self:btn_print_waypoint()
      end
   end
   return true
end
function waypoint_editor:btn_mark_point()
   self:btn_close()
   if waypoint_line_main=="" then
      waypoint_line_main="points = p0"
      waypoint_points_counter=waypoint_points_counter+1
   else
      waypoint_points_counter=waypoint_points_counter+1
      if waypoint_points_counter>=1 then
         waypoint_data=waypoint_data..waypoint_line_attacher
      end
      waypoint_line_main=waypoint_line_main..",p"..waypoint_points_counter
   end
   if waypoint_points_counter~=-1 then
      local next_point=waypoint_points_counter+1
      if (self.point_animation_field:GetText()==nil or self.point_animation_field:GetText()=="") and (self.point_signal_field:GetText()==nil or self.point_signal_field:GetText()=="") then
         waypoint_line_1="p"..waypoint_points_counter..":name = wp0"..waypoint_points_counter..game.translate_string("\n")
      elseif (self.point_animation_field:GetText()~=nil and self.point_animation_field:GetText()~="") and (self.point_signal_field:GetText()==nil or self.point_signal_field:GetText()=="") then
         waypoint_line_1="p"..waypoint_points_counter..":name = wp0"..waypoint_points_counter.."|a="..tostring(self.point_animation_field:GetText())..game.translate_string("\n")
      elseif (self.point_signal_field:GetText()~=nil and self.point_signal_field:GetText()~="") and (self.point_animation_field:GetText()==nil or self.point_animation_field:GetText()=="") then
         waypoint_line_1="p"..waypoint_points_counter..":name = wp0"..waypoint_points_counter.."|sig="..tostring(self.point_signal_field:GetText())..game.translate_string("\n")
      elseif (self.point_animation_field:GetText()~=nil and self.point_animation_field:GetText()~="") and (self.point_signal_field:GetText()~=nil and self.point_signal_field:GetText()~="") then
         waypoint_line_1="p"..waypoint_points_counter..":name = wp0"..waypoint_points_counter.."|a="..tostring(self.point_animation_field:GetText()).."|sig="..tostring(self.point_signal_field:GetText())..game.translate_string("\n")
      end
      waypoint_line_2="p"..waypoint_points_counter..":flags = 0x1"..game.translate_string("\n")
      waypoint_line_3="p"..waypoint_points_counter..":position = "..db.actor:position().x..","..db.actor:position().y..","..db.actor:position().z..game.translate_string("\n")
      waypoint_line_4="p"..waypoint_points_counter..":game_vertex_id = "..db.actor:game_vertex_id()..game.translate_string("\n")
      waypoint_line_5="p"..waypoint_points_counter..":level_vertex_id = "..db.actor:level_vertex_id()..game.translate_string("\n")
      if waypoint_points_counter>=1 and self.check_way_closed:GetCheck() then
         waypoint_line_6="p"..waypoint_points_counter..":links = p0(1)"..game.translate_string("\n")
      else
         waypoint_line_6=""
      end
      waypoint_line_attacher="p"..waypoint_points_counter..":links = ".."p"..next_point.."(1)"..game.translate_string("\n")
      waypoint_data=waypoint_data..game.translate_string("\n")..waypoint_line_1..waypoint_line_2..waypoint_line_3..waypoint_line_4..waypoint_line_5
   end
   waypoint_line_1,waypoint_line_2,waypoint_line_3,waypoint_line_4,waypoint_line_5="","","","",""
end
function waypoint_editor:btn_print_waypoint()
   if waypoint_line_main=="" then
      self:btn_mark_point()
   else
      self:btn_close()
   end
   waypoint_assembly=game.translate_string("\n").."["..tostring(waypoint_name).."]"..game.translate_string("\n")..waypoint_line_main..waypoint_data..waypoint_line_6
   debug_to_file("waypoints.txt",waypoint_assembly)
   give_quick_news("Путь "..waypoint_name.." успешно создан.")
   waypoint_line_main=""
   waypoint_points_counter=-1
   waypoint_assembly,waypoint_data="",""
end
function waypoint_editor:btn_show_waypoint()
   run_choose_box("yes","waypoint_editor",game.translate_string("\n").."["..tostring(waypoint_name).."]"..game.translate_string("\n")..waypoint_line_main..waypoint_data)
end
function waypoint_editor:btn_close()
   waypoint_name=self.waypoint_name_field:GetText()
   self:HideDialog()
   bool_is_editor_show=false
end
------------------------------------------------------------------------------
--                          Редактор all.spawn отладки                      --
------------------------------------------------------------------------------
local allspawn_cfg_radius=1
local allspawn_cfg_counting=0 --/ Начальный отсчет секции
local allspawn_cfg_magazine=30
local allspawn_cfg_prefix="nil"
local allspawn_cfg_suffix="nil"
local allspawn_cfg_logic_path="nil"
local allspawn_cfg_hiding_place="nil"
local allspawn_editor_section=1
local allspawn_last_name="nil"
local allspawn_last_type="nil"
local allspawn_last_id="nil"
local allspawn_auto_print_mode=false
local allspawn_auto_print_delay=4000 --/ Частота авто-отладки
local allspawn_sections_panel_1 = {
{name="space_restrictor",type="space_restrictor",id=1},
{name="smart_terrain",type="smart_terrain",id=2}
}
local allspawn_sections_panel_2 = {
{name="zone_field_acidic_weak",type="anomaly",id=1},
{name="zone_field_acidic_average",type="anomaly",id=2},
{name="zone_field_acidic_strong",type="anomaly",id=3},
{name="zone_field_psychic_weak",type="anomaly",id=4},
{name="zone_field_psychic_average",type="anomaly",id=5},
{name="zone_field_psychic_strong",type="anomaly",id=6},
{name="zone_field_radioactive_weak",type="anomaly",id=7},
{name="zone_field_radioactive_average",type="anomaly",id=8},
{name="zone_field_radioactive_strong",type="anomaly",id=9},
{name="zone_field_thermal_weak",type="anomaly",id=10},
{name="zone_field_thermal_average",type="anomaly",id=11},
{name="zone_field_thermal_strong",type="anomaly",id=12},
{name="zone_mine_thermal_weak",type="anomaly",id=13},
{name="zone_mine_thermal_average",type="anomaly",id=14},
{name="zone_mine_thermal_strong",type="anomaly",id=15},
{name="zone_mine_gravitational_weak",type="anomaly",id=16},
{name="zone_mine_gravitational_average",type="anomaly",id=17},
{name="zone_mine_gravitational_strong",type="anomaly",id=18},
{name="zone_mine_electric_weak",type="anomaly",id=19},
{name="zone_mine_electric_average",type="anomaly",id=20},
{name="zone_mine_electric_strong",type="anomaly",id=21}
}
local allspawn_sections_panel_3 = {
{name="af_cristall",type="other",id=1},
{name="af_fireball",type="other",id=2},
{name="af_dummy_glassbeads",type="other",id=3},
{name="af_eye",type="other",id=4},
{name="af_fire",type="other",id=5},
{name="af_medusa",type="other",id=6},
{name="af_cristall_flower",type="other",id=7},
{name="af_night_star",type="other",id=8},
{name="af_vyvert",type="other",id=9},
{name="af_gravi",type="other",id=10},
{name="af_gold_fish",type="other",id=11},
{name="af_blood",type="other",id=12},
{name="af_mincer_meat",type="other",id=13},
{name="af_soul",type="other",id=14},
{name="af_fuzz_kolobok",type="other",id=15},
{name="af_baloon",type="other",id=16},
{name="af_glass",type="other",id=17},
{name="af_electra_sparkler",type="other",id=18},
{name="af_electra_flash",type="other",id=19},
{name="af_electra_moonlight",type="other",id=20},
{name="af_dummy_battery",type="other",id=21},
{name="af_dummy_dummy",type="other",id=22},
{name="af_ice",type="other",id=23}
}
local allspawn_sections_panel_4 = {
{name="helm_respirator",type="outfit",id=1},
{name="helm_hardhat",type="outfit",id=2},
{name="helm_protective",type="outfit",id=3},
{name="helm_tactic",type="outfit",id=4},
{name="helm_battle",type="outfit",id=5},
{name="novice_outfit",type="outfit",id=6},
{name="stalker_outfit",type="outfit",id=7},
{name="scientific_outfit",type="outfit",id=8},
{name="svoboda_light_outfit",type="outfit",id=9},
{name="svoboda_heavy_outfit",type="outfit",id=10},
--{name="cs_heavy_outfit",type="outfit",id=11},
{name="dolg_outfit",type="outfit",id=12},
{name="dolg_heavy_outfit",type="outfit",id=13},
{name="exo_outfit",type="outfit",id=14},
{name="specops_outfit",type="outfit",id=15},
{name="military_outfit",type="outfit",id=16}
}
local allspawn_sections_panel_5 = {
{name="wpn_pm",type="weapon",id=1},
{name="wpn_pb",type="weapon",id=2},
{name="wpn_fort",type="weapon",id=3},
{name="wpn_hpsa",type="weapon",id=4},
{name="wpn_beretta",type="weapon",id=5},
{name="wpn_walther",type="weapon",id=6},
{name="wpn_sig220",type="weapon",id=7},
{name="wpn_colt1911",type="weapon",id=8},
{name="wpn_usp",type="weapon",id=9},
{name="wpn_desert_eagle",type="weapon",id=10},
{name="wpn_bm16",type="weapon",id=11},
{name="wpn_toz34",type="weapon",id=12},
{name="wpn_wincheaster1300",type="weapon",id=13},
{name="wpn_spas12",type="weapon",id=14},
{name="wpn_protecta",type="weapon",id=15},
{name="wpn_ak74u",type="weapon",id=16},
{name="wpn_mp5",type="weapon",id=17},
{name="wpn_ak74",type="weapon",id=18},
{name="wpn_abakan",type="weapon",id=19},
{name="wpn_l85",type="weapon",id=20},
{name="wpn_gauss",type="weapon",id=21},
{name="wpn_lr300",type="weapon",id=22},
{name="wpn_sig550",type="weapon",id=23},
{name="wpn_groza",type="weapon",id=24},
{name="wpn_val",type="weapon",id=25},
{name="wpn_vintorez",type="weapon",id=26},
{name="wpn_svu",type="weapon",id=27},
{name="wpn_svd",type="weapon",id=28},
{name="wpn_rg-6",type="weapon",id=29},
{name="wpn_rpg7",type="weapon",id=30},
{name="wpn_g36",type="weapon",id=31},
{name="wpn_fn2000",type="weapon",id=32},
{name="wpn_pkm",type="weapon",id=33}
}
local allspawn_sections_panel_6 = {
{name="ammo_9x18_fmj",type="ammo",id=1},
{name="ammo_9x18_pmm",type="ammo",id=2},
{name="ammo_9x19_fmj",type="ammo",id=3},
{name="ammo_9x19_pbp",type="ammo",id=4},
{name="ammo_11.43x23_hydro",type="ammo",id=5},
{name="ammo_11.43x23_fmj",type="ammo",id=6},
{name="ammo_12x70_buck",type="ammo",id=7},
{name="ammo_12x76_zhekan",type="ammo",id=8},
{name="ammo_5.45x39_fmj",type="ammo",id=9},
{name="ammo_5.45x39_ap",type="ammo",id=10},
{name="ammo_9x39_pab9",type="ammo",id=11},
{name="ammo_9x39_ap",type="ammo",id=12},
{name="ammo_5.56x45_ss190",type="ammo",id=13},
{name="ammo_5.56x45_ap",type="ammo",id=14},
{name="ammo_pkm_100",type="ammo",id=15},
{name="ammo_gauss",type="ammo",id=16},
{name="ammo_gauss_cardan",type="ammo",id=17},
{name="ammo_og-7b",type="ammo",id=18},
{name="ammo_vog-25",type="ammo",id=19},
{name="ammo_m209",type="ammo",id=20},
{name="grenade_rgd5",type="ammo",id=21},
{name="grenade_f1",type="ammo",id=22},
{name="grenade_gd-05",type="ammo",id=23},
{name="wpn_addon_scope",type="other",id=24},
{name="wpn_addon_scope_x2.7",type="other",id=25},
{name="wpn_addon_scope_detector",type="other",id=26},
{name="wpn_addon_scope_night",type="other",id=27},
{name="wpn_addon_scope_susat",type="other",id=28},
{name="wpn_addon_scope_susat_x1.6",type="other",id=29},
{name="wpn_addon_scope_susat_custom",type="other",id=30},
{name="wpn_addon_scope_susat_dusk",type="other",id=31},
{name="wpn_addon_scope_susat_night",type="other",id=32},
{name="wpn_addon_silencer",type="other",id=33},
{name="wpn_addon_grenade_launcher",type="other",id=34},
{name="wpn_addon_grenade_launcher_m203",type="other",id=35}
}
local allspawn_sections_panel_7 = {
{name="bandage",type="other",id=1},
{name="medkit",type="other",id=2},
{name="medkit_army",type="other",id=3},
{name="medkit_scientic",type="other",id=4},
{name="antirad",type="other",id=5},
{name="drug_booster",type="other",id=6},
{name="drug_coagulant",type="other",id=7},
{name="drug_psy_blockade",type="other",id=8},
{name="drug_antidot",type="other",id=9},
{name="drug_radioprotector",type="other",id=10},
{name="drug_anabiotic",type="other",id=11},
{name="bread",type="other",id=12},
{name="kolbasa",type="other",id=13},
{name="conserva",type="other",id=14},
{name="vodka",type="other",id=15},
{name="energy_drink",type="other",id=16},
{name="detector_simple",type="other",id=17},
{name="detector_advanced",type="other",id=18},
{name="detector_elite",type="other",id=19},
{name="detector_scientific",type="other",id=20}
}
class "allspawn_editor_item" (CUIListBoxItem)
function allspawn_editor_item:__init(height) super(height)
   self.name=self:GetTextItem()
   self:SetTextColor(GetARGB(255,210,210,210))
   self.name:SetFont(GetFontLetterica18Russian())
   self.name:SetWndSize(vector2():set(278,height))
   self.name:SetEllipsis(true)
end
class "allspawn_editor" (CUIScriptWnd)
function allspawn_editor:__init(owner) super()
   self.owner = owner
   self:InitControls()
   self:InitCallBacks()
   if allspawn_editor_section==1 then
      self:FillList(allspawn_sections_panel_1)
   elseif allspawn_editor_section==2 then
      self:FillList(allspawn_sections_panel_2)
   elseif allspawn_editor_section==3 then
      self:FillList(allspawn_sections_panel_3)
   elseif allspawn_editor_section==4 then
      self:FillList(allspawn_sections_panel_4)
   elseif allspawn_editor_section==5 then
      self:FillList(allspawn_sections_panel_5)
   elseif allspawn_editor_section==6 then
      self:FillList(allspawn_sections_panel_6)
   elseif allspawn_editor_section==7 then
      self:FillList(allspawn_sections_panel_7)
   end
end
function allspawn_editor:__finalize()
end
function allspawn_editor:FillList(list)
   self.stations_list:Clear()
   for k,v in pairs(list) do
      self:AddItemToList(v.name,v.type,v.id)
   end
end
function allspawn_editor:AddItemToList(name,type,id)
   local source=allspawn_editor_item(22)
   source.name:SetText(name)
   self.stations_list:AddExistingItem(source)
   source.type=type
   source.id=source:AddTextField(id,0)
   source.id:SetWndPos(vector2():set(296,0))
end
function allspawn_editor:InitControls()
   self:SetWndRect(Frect():set(0,0,1024,768))
   local xml = CScriptXmlInit()
   xml:ParseFile("ui_editors.xml")
   self.allspawn_editor_form=xml:InitStatic("allspawn_editor_form",self)
   self.editor_title=xml:InitStatic("allspawn_editor_form:editor_title",self.allspawn_editor_form)
   self:start_button(xml,"btn_create")
   self:start_button(xml,"btn_close")
   self:start_button(xml,"btn_read_example")
   self:start_button(xml,"btn_radius_minus")
   self:start_button(xml,"btn_radius_plus")
   self:start_button(xml,"btn_counter_minus")
   self:start_button(xml,"btn_counter_plus")
   self:start_button(xml,"btn_magazine_minus")
   self:start_button(xml,"btn_magazine_plus")
   self:start_button(xml,"btn_auto_print_activate")
   self:start_button(xml,"btn_auto_print_deactivate")
   self:start_button(xml,"btn_switch_panel_1")
   self:start_button(xml,"btn_switch_panel_2")
   self:start_button(xml,"btn_switch_panel_3")
   self:start_button(xml,"btn_switch_panel_4")
   self:start_button(xml,"btn_switch_panel_5")
   self:start_button(xml,"btn_switch_panel_6")
   self:start_button(xml,"btn_switch_panel_7")
   self.check_with_logic=xml:InitCheck("allspawn_editor_form:check_with_logic",self.allspawn_editor_form)
   self.check_with_logic:SetCheck(info_get_boolean("allspawn_editor_check_logic",true))
   self.check_another_mode=xml:InitCheck("allspawn_editor_form:check_another_mode",self.allspawn_editor_form)
   self.check_another_mode:SetCheck(info_get_boolean("allspawn_editor_check_another_mode"))
   self.cfg_display_radius=xml:InitStatic("allspawn_editor_form:cfg_display_radius",self.allspawn_editor_form)
   self.cfg_display_counter=xml:InitStatic("allspawn_editor_form:cfg_display_counter",self.allspawn_editor_form)
   self.cfg_display_magazine=xml:InitStatic("allspawn_editor_form:cfg_display_magazine",self.allspawn_editor_form)
   self.cfg_name_prefix_field=xml:InitEditBox("allspawn_editor_form:cfg_name_prefix_field",self.allspawn_editor_form)
   self.cfg_name_suffix_field=xml:InitEditBox("allspawn_editor_form:cfg_name_suffix_field",self.allspawn_editor_form)
   self.cfg_name_logic_path_field=xml:InitEditBox("allspawn_editor_form:cfg_name_logic_path_field",self.allspawn_editor_form)
   self.cfg_name_hiding_place_field=xml:InitEditBox("allspawn_editor_form:cfg_name_hiding_place_field",self.allspawn_editor_form)
   self.stations_list=xml:InitListBox("allspawn_editor_form:stations_list",self)
   self.stations_list:ShowSelectedItem(true)
   self:Register(self.stations_list,"stations_list_window")
   self.editor_title:TextControl():SetText(game.translate_string("st_allspawn_editor_title"))
   if allspawn_cfg_prefix=="nil" then 
      allspawn_cfg_prefix=string.sub(level.name(),1,3)
      self.cfg_name_prefix_field:SetText(allspawn_cfg_prefix)
   else
      self.cfg_name_prefix_field:SetText(allspawn_cfg_prefix)
   end
   if allspawn_cfg_suffix=="nil" then 
      allspawn_cfg_suffix="mod_object"
      self.cfg_name_suffix_field:SetText(allspawn_cfg_suffix)
   else
      self.cfg_name_suffix_field:SetText(allspawn_cfg_suffix)
   end
   if allspawn_cfg_logic_path~="nil" then
      self.cfg_name_logic_path_field:SetText(allspawn_cfg_logic_path)
   end
   if allspawn_cfg_hiding_place~="nil" then
      self.cfg_name_hiding_place_field:SetText(allspawn_cfg_hiding_place)
   end
end
function allspawn_editor:InitCallBacks()
   self:AddCallback("btn_switch_panel_1",ui_events.BUTTON_CLICKED,self.btn_switch_panel_1,self)
   self:AddCallback("btn_switch_panel_2",ui_events.BUTTON_CLICKED,self.btn_switch_panel_2,self)
   self:AddCallback("btn_switch_panel_3",ui_events.BUTTON_CLICKED,self.btn_switch_panel_3,self)
   self:AddCallback("btn_switch_panel_4",ui_events.BUTTON_CLICKED,self.btn_switch_panel_4,self)
   self:AddCallback("btn_switch_panel_5",ui_events.BUTTON_CLICKED,self.btn_switch_panel_5,self)
   self:AddCallback("btn_switch_panel_6",ui_events.BUTTON_CLICKED,self.btn_switch_panel_6,self)
   self:AddCallback("btn_switch_panel_7",ui_events.BUTTON_CLICKED,self.btn_switch_panel_7,self)
   self:AddCallback("btn_create",ui_events.BUTTON_CLICKED,self.btn_create,self)
   self:AddCallback("btn_close",ui_events.BUTTON_CLICKED,self.btn_close,self)
   self:AddCallback("btn_read_example",ui_events.BUTTON_CLICKED,self.btn_read_example,self)
   self:AddCallback("btn_radius_minus",ui_events.BUTTON_CLICKED,self.btn_radius_minus,self)
   self:AddCallback("btn_radius_plus",ui_events.BUTTON_CLICKED,self.btn_radius_plus,self)
   self:AddCallback("btn_counter_minus",ui_events.BUTTON_CLICKED,self.btn_counter_minus,self)
   self:AddCallback("btn_counter_plus",ui_events.BUTTON_CLICKED,self.btn_counter_plus,self)
   self:AddCallback("btn_magazine_minus",ui_events.BUTTON_CLICKED,self.btn_magazine_minus,self)
   self:AddCallback("btn_magazine_plus",ui_events.BUTTON_CLICKED,self.btn_magazine_plus,self)
   self:AddCallback("btn_auto_print_activate",ui_events.BUTTON_CLICKED,self.btn_auto_print_activate,self)
   self:AddCallback("btn_auto_print_deactivate",ui_events.BUTTON_CLICKED,self.btn_auto_print_deactivate,self)
   self:AddCallback("stations_list_window",ui_events.WINDOW_LBUTTON_DB_CLICK,self.btn_create,self)
end
function allspawn_editor:Update()
   CUIScriptWnd.Update(self)
   if not db.actor:alive() then
      self:btn_close()
   end
   if allspawn_cfg_radius<0 then allspawn_cfg_radius=0 end
   if allspawn_cfg_counting<0 then allspawn_cfg_counting=0 end
   if allspawn_cfg_magazine<0 then allspawn_cfg_magazine=0 end
   if self.cfg_display_radius:TextControl():GetText()~=allspawn_cfg_radius then
      self.cfg_display_radius:TextControl():SetText(allspawn_cfg_radius)
   end
   if self.cfg_display_counter:TextControl():GetText()~=allspawn_cfg_counting then
      self.cfg_display_counter:TextControl():SetText(allspawn_cfg_counting)
   end
   if self.cfg_display_magazine:TextControl():GetText()~=allspawn_cfg_magazine then
      self.cfg_display_magazine:TextControl():SetText(allspawn_cfg_magazine)
   end
   if self:get_currert_selected("type")=="smart_terrain" and self.check_with_logic:GetCheck() then
      if allspawn_cfg_logic_path=="nil" then
         allspawn_cfg_logic_path="scripts\\"..level.name().."\\".."smart".."\\"..string.sub(level.name(),1,3).."_"
         self.cfg_name_logic_path_field:SetText(allspawn_cfg_logic_path)
      end
   end
   if allspawn_auto_print_mode==false then
      self.get_btn_auto_print_activate:Show(true)
      self.get_btn_auto_print_activate:Enable(true)
      self.get_btn_auto_print_deactivate:Show(false)
      self.get_btn_auto_print_deactivate:Enable(false)
   else
      self.get_btn_auto_print_activate:Show(false)
      self.get_btn_auto_print_activate:Enable(false)
      self.get_btn_auto_print_deactivate:Show(true)
      self.get_btn_auto_print_deactivate:Enable(true)
   end
   info_give_on_boolean(self.check_with_logic:GetCheck(),"allspawn_editor_check_logic",true)
   info_give_on_boolean(self.check_another_mode:GetCheck(),"allspawn_editor_check_another_mode")
end
function allspawn_editor:OnKeyboard(dik,keyboard_action)
   CUIScriptWnd.OnKeyboard(self,dik,keyboard_action)
   if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
      if dik==DIK_keys.DIK_ESCAPE then
         self:btn_close()
      end
   end
   return true
end
function allspawn_editor:start_button(xml,button_name)
   self["get_"..button_name]=xml:Init3tButton("allspawn_editor_form:"..button_name,self.allspawn_editor_form)
   self:Register(self["get_"..button_name],button_name)
end
function allspawn_editor:btn_switch_panel_1()
   self:FillList(allspawn_sections_panel_1)
   allspawn_editor_section=1
end
function allspawn_editor:btn_switch_panel_2()
   self:FillList(allspawn_sections_panel_2)
   allspawn_editor_section=2
end
function allspawn_editor:btn_switch_panel_3()
   self:FillList(allspawn_sections_panel_3)
   allspawn_editor_section=3
end
function allspawn_editor:btn_switch_panel_4()
   self:FillList(allspawn_sections_panel_4)
   allspawn_editor_section=4
end
function allspawn_editor:btn_switch_panel_5()
   self:FillList(allspawn_sections_panel_5)
   allspawn_editor_section=5
end
function allspawn_editor:btn_switch_panel_6()
   self:FillList(allspawn_sections_panel_6)
   allspawn_editor_section=6
end
function allspawn_editor:btn_switch_panel_7()
   self:FillList(allspawn_sections_panel_7)
   allspawn_editor_section=7
end
function allspawn_editor:btn_radius_minus()
   allspawn_cfg_radius=allspawn_cfg_radius-0.5
end
function allspawn_editor:btn_radius_plus()
   allspawn_cfg_radius=allspawn_cfg_radius+0.5
end
function allspawn_editor:btn_counter_minus()
   allspawn_cfg_counting=allspawn_cfg_counting-1
end
function allspawn_editor:btn_counter_plus()
   allspawn_cfg_counting=allspawn_cfg_counting+1
end
function allspawn_editor:btn_magazine_minus()
   allspawn_cfg_magazine=allspawn_cfg_magazine-1
end
function allspawn_editor:btn_magazine_plus()
   allspawn_cfg_magazine=allspawn_cfg_magazine+1
end
function allspawn_editor:btn_create()
   if self.stations_list:GetSize()==0 then return end
   local item=self.stations_list:GetSelectedItem()
   if not item then
      if allspawn_last_name=="nil" then
         return
      else
         local item_name=tostring(allspawn_last_name)
         local item_type=tostring(allspawn_last_type)
         local item_id=tonumber(allspawn_last_id)
         self:check_data_by_id(item_name,item_type,item_id)
         return
      end
   end
   local item_name=tostring(item.name:GetText())
   local item_type=tostring(item.type)
   local item_id=tonumber(item.id:GetText())
   self:check_data_by_id(item_name,item_type,item_id)
end
function allspawn_editor:get_currert_selected(what)
   if self.stations_list:GetSize()==0 then return nil end
   local item=self.stations_list:GetSelectedItem()
   if not item then return nil end
   if what=="name" then
      return tostring(item.name:GetText())
   elseif what=="type" then
      return tostring(item.type)
   else
      return tonumber(item.id:GetText())
   end
end
function allspawn_editor:check_data_by_id(name,type,id,only_read)
   local data,logic="",""
   if self.check_another_mode:GetCheck() then
      data="alife():create("..name..",vector():set("..db.actor:position().x..","..db.actor:position().y..","..db.actor:position().z.."),"..db.actor:level_vertex_id()..","..db.actor:game_vertex_id()..")"
   else
      if type=="space_restrictor" then
         if self.check_with_logic:GetCheck() then
            if tostring(self.cfg_name_logic_path_field:GetText())=="" then
               logic="custom_data = <<END"..game.translate_string("\n").."END"..game.translate_string("\n")
            else
               logic="custom_data = <<END"..game.translate_string("\n").."[logic]"..game.translate_string("\n").."cfg = "..tostring(self.cfg_name_logic_path_field:GetText())..".ltx"..game.translate_string("\n").."END"..game.translate_string("\n")
            end
         end
      elseif type=="smart_terrain" then
         if self.check_with_logic:GetCheck() then
            logic="custom_data = <<END"..game.translate_string("\n").."[smart_terrain]"..game.translate_string("\n").."cfg = "..tostring(self.cfg_name_logic_path_field:GetText())..".ltx"..game.translate_string("\n").."END"..game.translate_string("\n")
         end
      else
         if self.check_with_logic:GetCheck() then
            if tostring(self.cfg_name_hiding_place_field:GetText())=="" then
               logic="custom_data = <<END"..game.translate_string("\n").."END"..game.translate_string("\n")
            else
               logic="custom_data = <<END"..game.translate_string("\n").."[secret]"..game.translate_string("\n").."name = "..tostring(self.cfg_name_hiding_place_field:GetText())..game.translate_string("\n").."END"..game.translate_string("\n")
            end
         end
      end
      if type=="space_restrictor" then
         data=game.translate_string("\n").."["..allspawn_cfg_counting.."]"..game.translate_string("\n").."section_name = space_restrictor"..game.translate_string("\n").."name = "..tostring(self.cfg_name_prefix_field:GetText()).."_"..tostring(self.cfg_name_suffix_field:GetText()).."_"..allspawn_cfg_counting..game.translate_string("\n").."position = "..db.actor:position().x..","..db.actor:position().y..","..db.actor:position().z..game.translate_string("\n").."direction = 0,0,0"..game.translate_string("\n").."game_vertex_id = "..db.actor:game_vertex_id()..game.translate_string("\n").."distance = 0"..game.translate_string("\n").."level_vertex_id = "..db.actor:level_vertex_id()..game.translate_string("\n").."object_flags = 0xffffff3e"..game.translate_string("\n")..logic.."shapes = shape0"..game.translate_string("\n").."shape0:type = sphere"..game.translate_string("\n").."shape0:offset = 0,0,0"..game.translate_string("\n").."shape0:radius = "..allspawn_cfg_radius..game.translate_string("\n").."restrictor_type = 3"
      elseif type=="smart_terrain" then
         data=game.translate_string("\n").."["..allspawn_cfg_counting.."]"..game.translate_string("\n").."section_name = smart_terrain"..game.translate_string("\n").."name = "..tostring(self.cfg_name_prefix_field:GetText()).."_"..tostring(self.cfg_name_suffix_field:GetText()).."_"..allspawn_cfg_counting..game.translate_string("\n").."position = "..db.actor:position().x..","..db.actor:position().y..","..db.actor:position().z..game.translate_string("\n").."direction = 0,0,0"..game.translate_string("\n").."game_vertex_id = "..db.actor:game_vertex_id()..game.translate_string("\n").."distance = 14"..game.translate_string("\n").."level_vertex_id = "..db.actor:level_vertex_id()..game.translate_string("\n").."object_flags = 0xffffff3e"..game.translate_string("\n")..logic.."shapes = shape0"..game.translate_string("\n").."shape0:type = sphere"..game.translate_string("\n").."shape0:offset = 0,0,0"..game.translate_string("\n").."shape0:radius = "..allspawn_cfg_radius..game.translate_string("\n").."restrictor_type = 3"
      elseif type=="anomaly" then
         data=game.translate_string("\n").."["..allspawn_cfg_counting.."]"..game.translate_string("\n").."section_name = "..name..game.translate_string("\n").."name = "..tostring(self.cfg_name_prefix_field:GetText()).."_"..tostring(self.cfg_name_suffix_field:GetText()).."_"..allspawn_cfg_counting..game.translate_string("\n").."position = "..db.actor:position().x..","..db.actor:position().y..","..db.actor:position().z..game.translate_string("\n").."direction = 0,0,0"..game.translate_string("\n").."game_vertex_id = "..db.actor:game_vertex_id()..game.translate_string("\n").."distance = 4"..game.translate_string("\n").."level_vertex_id = "..db.actor:level_vertex_id()..game.translate_string("\n").."object_flags = 0xffffff3e"..game.translate_string("\n")..logic.."shapes = shape0"..game.translate_string("\n").."shape0:type = sphere"..game.translate_string("\n").."shape0:offset = 0,0,0"..game.translate_string("\n").."shape0:radius = "..allspawn_cfg_radius..game.translate_string("\n").."restrictor_type = 3"..game.translate_string("\n").."max_power = 0"..game.translate_string("\n").."offline_interactive_radius = 30"..game.translate_string("\n").."artefact_spawn_count = 32"..game.translate_string("\n").."artefact_position_offset = 0x1320"
      elseif type=="ammo" then
         data=game.translate_string("\n").."["..allspawn_cfg_counting.."]"..game.translate_string("\n").."section_name = "..name..game.translate_string("\n").."name = "..tostring(self.cfg_name_prefix_field:GetText()).."_"..tostring(self.cfg_name_suffix_field:GetText()).."_"..allspawn_cfg_counting..game.translate_string("\n").."position = "..db.actor:position().x..","..db.actor:position().y..","..db.actor:position().z..game.translate_string("\n").."direction = 0,0,0"..game.translate_string("\n").."game_vertex_id = "..db.actor:game_vertex_id()..game.translate_string("\n").."distance = 0"..game.translate_string("\n").."level_vertex_id = "..db.actor:level_vertex_id()..game.translate_string("\n").."object_flags = 0xffffff0f"..game.translate_string("\n")..logic.."visual_name = "..ReadVisual(name)..game.translate_string("\n").."condition = 1"..game.translate_string("\n").."upgrades = "..game.translate_string("\n").."ammo_left = "..allspawn_cfg_magazine..game.translate_string("\n").."upd:ammo_left = "..allspawn_cfg_magazine
      elseif type=="outfit" then
         data=game.translate_string("\n").."["..allspawn_cfg_counting.."]"..game.translate_string("\n").."section_name = "..name..game.translate_string("\n").."name = "..tostring(self.cfg_name_prefix_field:GetText()).."_"..tostring(self.cfg_name_suffix_field:GetText()).."_"..allspawn_cfg_counting..game.translate_string("\n").."position = "..db.actor:position().x..","..db.actor:position().y..","..db.actor:position().z..game.translate_string("\n").."direction = 0,0,0"..game.translate_string("\n").."game_vertex_id = "..db.actor:game_vertex_id()..game.translate_string("\n").."distance = 0"..game.translate_string("\n").."level_vertex_id = "..db.actor:level_vertex_id()..game.translate_string("\n").."object_flags = 0xffffff3f"..game.translate_string("\n")..logic.."visual_name = "..ReadVisual(name)..game.translate_string("\n").."condition = 1"..game.translate_string("\n").."upgrades = "..game.translate_string("\n").."upd:condition = 255"
      elseif type=="weapon" then
         data=game.translate_string("\n").."["..allspawn_cfg_counting.."]"..game.translate_string("\n").."section_name = "..name..game.translate_string("\n").."name = "..tostring(self.cfg_name_prefix_field:GetText()).."_"..tostring(self.cfg_name_suffix_field:GetText()).."_"..allspawn_cfg_counting..game.translate_string("\n").."position = "..db.actor:position().x..","..db.actor:position().y..","..db.actor:position().z..game.translate_string("\n").."direction = 0,0,0"..game.translate_string("\n").."game_vertex_id = "..db.actor:game_vertex_id()..game.translate_string("\n").."distance = 0"..game.translate_string("\n").."level_vertex_id = "..db.actor:level_vertex_id()..game.translate_string("\n").."object_flags = 0xffffff0f"..game.translate_string("\n")..logic.."visual_name = "..ReadVisual(name)..game.translate_string("\n").."condition = 1.0"..game.translate_string("\n").."upgrades = "..game.translate_string("\n").."ammo_current = 90"..game.translate_string("\n").."upd:condition = 255"..game.translate_string("\n").."upd:weapon_flags = 0"..game.translate_string("\n").."upd:ammo_elapsed = 0"..game.translate_string("\n").."upd:addon_flags = 0"..game.translate_string("\n").."upd:ammo_type = 0"..game.translate_string("\n").."upd:weapon_state = 0"..game.translate_string("\n").."upd:weapon_zoom = 0"..game.translate_string("\n").."upd:current_fire_mode = 0"..game.translate_string("\n").."upd:grenade_mode = 0"
      elseif type=="grenade" then
         data=game.translate_string("\n").."["..allspawn_cfg_counting.."]"..game.translate_string("\n").."section_name = "..name..game.translate_string("\n").."name = "..tostring(self.cfg_name_prefix_field:GetText()).."_"..tostring(self.cfg_name_suffix_field:GetText()).."_"..allspawn_cfg_counting..game.translate_string("\n").."position = "..db.actor:position().x..","..db.actor:position().y..","..db.actor:position().z..game.translate_string("\n").."direction = 0,0,0"..game.translate_string("\n").."game_vertex_id = "..db.actor:game_vertex_id()..game.translate_string("\n").."distance = 0"..game.translate_string("\n").."level_vertex_id = "..db.actor:level_vertex_id()..game.translate_string("\n").."object_flags = 0xffffff0f"..game.translate_string("\n")..logic.."visual_name = "..ReadVisual(name)..game.translate_string("\n").."condition = 1"..game.translate_string("\n").."upgrades = "
      elseif type=="other" then
         data=game.translate_string("\n").."["..allspawn_cfg_counting.."]"..game.translate_string("\n").."section_name = "..name..game.translate_string("\n").."name = "..tostring(self.cfg_name_prefix_field:GetText()).."_"..tostring(self.cfg_name_suffix_field:GetText()).."_"..allspawn_cfg_counting..game.translate_string("\n").."position = "..db.actor:position().x..","..db.actor:position().y..","..db.actor:position().z..game.translate_string("\n").."direction = 0,0,0"..game.translate_string("\n").."game_vertex_id = "..db.actor:game_vertex_id()..game.translate_string("\n").."distance = 0"..game.translate_string("\n").."level_vertex_id = "..db.actor:level_vertex_id()..game.translate_string("\n").."object_flags = 0xffffff3f"..game.translate_string("\n")..logic.."visual_name = "..ReadVisual(name)..game.translate_string("\n").."condition = 1"..game.translate_string("\n").."upgrades = "
      end
   end
   if data=="" then return data end
   if only_read==true then
      return data
   else
      if self.check_another_mode:GetCheck() then
         debug_to_file("allspawn_another_mode.txt",data)
      else
         debug_to_file("allspawn_default_mode.txt",data)
         allspawn_cfg_counting=allspawn_cfg_counting+1
      end
      allspawn_last_name=name
      allspawn_last_type=type
      allspawn_last_id=id
   end
   return ""
end
function allspawn_editor:btn_close()
   self:HideDialog()
   bool_is_editor_show=false
   allspawn_cfg_prefix=tostring(self.cfg_name_prefix_field:GetText())
   allspawn_cfg_suffix=tostring(self.cfg_name_suffix_field:GetText())
   if self.cfg_name_logic_path_field:GetText()~="" then
      allspawn_cfg_logic_path=tostring(self.cfg_name_logic_path_field:GetText())
   end
   if self.cfg_name_hiding_place_field:GetText()~="" then
      allspawn_cfg_hiding_place=tostring(self.cfg_name_hiding_place_field:GetText())
   end
end
function allspawn_editor:btn_read_example()
   if self.stations_list:GetSize()==0 then return end
   local item=self.stations_list:GetSelectedItem()
   if not item then return end
   local item_name=tostring(item.name:GetText())
   local item_type=tostring(item.type)
   local item_id=tonumber(item.id:GetText())
   run_choose_box("yes","allspawn_editor",self:check_data_by_id(item_name,item_type,item_id,true))
end
function allspawn_editor:btn_auto_print_activate()
   if allspawn_last_name=="nil" and self:get_currert_selected("name")~=nil then
      allspawn_last_name=self:get_currert_selected("name")
      allspawn_last_type=self:get_currert_selected("type")
      allspawn_last_id=self:get_currert_selected("id")
   end
   if allspawn_last_name=="nil" then
      run_choose_box("yes","allspawn_editor",game.translate_string("st_allspawn_auto_print_error"))
      return
   end
   self:btn_close()
   allspawn_auto_print_mode=true
end
function allspawn_editor:btn_auto_print_deactivate()
   bool_allspawn_auto_print=false
   allspawn_auto_print_mode=false
end
function allspawn_editor_update()
   local precond=allspawn_auto_print_mode==true and bool_is_editor_show==false
   if timer_allspawn_auto_print~=0 then
      if time_global()>=timer_allspawn_auto_print then
         timer_allspawn_auto_print=0
      end
   end
   if precond then
      if bool_allspawn_auto_print==false then
         bool_allspawn_auto_print=true
         timer_allspawn_auto_print=time_global()+(allspawn_auto_print_delay+500)
      end
      if timer_allspawn_auto_print==0 then
         allspawn_editor():btn_create()
         give_quick_news(game.translate_string("st_allspawn_auto_print_signal").." "..allspawn_last_name)
         timer_allspawn_auto_print=time_global()+allspawn_auto_print_delay
      end
   end
end
------------------------------------------------------------------------------
--                       Загрузчик информационных блоков                    --
------------------------------------------------------------------------------
local information_control = nil
class "information_block" (CUIScriptWnd)
function information_block:__init() super()
   self:SetWndRect(Frect():set(0,0,1024,768))
   self.information_mb=CUIMessageBoxEx()
   self:Register(self.information_mb,"information_mb")
   self:AddCallback("information_mb",ui_events.MESSAGE_BOX_OK_CLICKED,self.OnMsgOk,self)
   self:AddCallback("information_mb",ui_events.MESSAGE_BOX_YES_CLICKED,self.OnMsgYes,self)
   self:AddCallback("information_mb",ui_events.MESSAGE_BOX_NO_CLICKED,self.OnMsgNo,self)
end
function information_block:Show(mb_type,reason_type,text,extra_value)
   if mb_type=="yes_or_no" or mb_type=="no_or_yes" then
      self.information_mb:InitMessageBox("message_box_yes_no")
   else
      self.information_mb:InitMessageBox("message_box_ok")
   end
   self.information_mb:SetText(text)
   self.information_mb:ShowDialog(true)
   self.reason_type=reason_type
   if extra_value~=nil then
      self.extra_value=extra_value
   end
end
function information_block:OnMsgOk()
end
function information_block:OnMsgYes()
end
function information_block:OnMsgNo()
end
function information_block_show(mb_type,reason_type,text,extra_value)
   if information_control==nil then
      information_control=information_block()
   end
   information_control:Show(mb_type,reason_type,text,extra_value)
end