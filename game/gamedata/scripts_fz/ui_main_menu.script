--[[ ----------------------------------------------------------------------------------------------- 
 File       : ui_main_menu.script
 Description: Main Menu Dialog for STALKER
 Copyright  : 2004 © GSC Game World
 Author     : Serhiy Vynnychenko (narrator@gsc-game.kiev.ua)
 Last edit  : 03.06.2018 (Viнt@rь)
--]] -----------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------
class "main_menu" (CUIScriptWnd)
----------------------------------------------------------------------------------------------------------------------
function main_menu:__init() super()
	self.mbox_mode = 0
    self:InitControls()
    self:InitCallBacks()
    xr_s.on_main_menu_on() -- Distemper 03.2008 --
end

function main_menu:__finalize()
end

function main_menu:InitControls()
	self:SetWndRect(Frect():set(0, 0, 1024, 768))

    local xml = CScriptXmlInit()
    xml:ParseFile("ui_mm_main.xml")

    xml:InitStatic("background", self)
    self.shniaga = xml:InitMMShniaga("shniaga_wnd", self);

	self.message_box = CUIMessageBoxEx()
	self:Register(self.message_box, "msg_box")
	
	local main_menu	= _G.main_menu.get_main_menu()

--/--==game_and_mod_ver==--
	local mod_ini = ini_file("mod_configs.ltx")
	if IsSectionExist("mod_version", mod_ini) then
		local mod_version = ReadString("mod_version", "version", mod_ini)
		local mod_update = ReadString("mod_version", "update", mod_ini)
		
		mod_version = string.format("Mod: [%s][%s]", mod_version, mod_update) 
	
		local mod_info_static = xml:InitStatic("mod_version", self)
		mod_info_static:TextControl():SetText(mod_version)
	end
	
	local engine_version = string.format("Engine: [%s][%s]", main_menu:GetEngineBuild(), main_menu:GetEngineBuildDate())
	local engine_info_static = xml:InitStatic("engine_version", self)
	engine_info_static:TextControl():SetText(engine_version .. string.format("(based on %s)", main_menu:GetGSVer()))

	-- DBG ----------------------------------------------------------
	local msgs = CheckDebugScripts()
	if #msgs > 0 then
		local count = 0
		for i = 1, #msgs do
			if msgs[i] then
				count = count + 1
				local msg = xml:InitStatic("dbg_" .. count, self)
				msg:TextControl():SetText("-=WARNING=-\\" .. msgs[i])
			end
		end
	end
	-- DBG ----------------------------------------------------------
--/--==game_and_mod_ver==--
end

function main_menu:Show(f)
	self.shniaga:SetVisibleMagnifier(f)
end

function main_menu:InitCallBacks()
	-- new game
	self:AddCallback("btn_novice",		ui_events.BUTTON_CLICKED,				self.OnButton_new_novice_game,		self)
	self:AddCallback("btn_stalker",		ui_events.BUTTON_CLICKED,				self.OnButton_new_stalker_game,		self)
	self:AddCallback("btn_veteran",		ui_events.BUTTON_CLICKED,				self.OnButton_new_veteran_game,		self)
	self:AddCallback("btn_master",		ui_events.BUTTON_CLICKED,				self.OnButton_new_master_game,		self)
	-- options
	self:AddCallback("btn_options",     ui_events.BUTTON_CLICKED,				self.OnButton_options_clicked,		self)
	self:AddCallback("btn_options_dbg", ui_events.BUTTON_CLICKED,				self.OnButton_dbg_options_clicked,	self)
	-- load
	self:AddCallback("btn_load",        ui_events.BUTTON_CLICKED,				self.OnButton_load_clicked,			self)
	-- save
	self:AddCallback("btn_save",		ui_events.BUTTON_CLICKED,				self.OnButton_save_clicked,			self)
	-- quit
	self:AddCallback("btn_quit",		ui_events.BUTTON_CLICKED,				self.OnButton_quit_clicked,			self)
	self:AddCallback("btn_quit_to_mm",	ui_events.BUTTON_CLICKED,				self.OnButton_disconnect_clicked,	self)
	self:AddCallback("btn_ret",			ui_events.BUTTON_CLICKED,				self.OnButton_return_game,			self)
	self:AddCallback("btn_lastsave",	ui_events.BUTTON_CLICKED,				self.OnButton_last_save,			self)
	self:AddCallback("btn_credits",		ui_events.BUTTON_CLICKED,				self.OnButton_credits_clicked,		self)
	-- message box
	self:AddCallback("msg_box",     	ui_events.MESSAGE_BOX_OK_CLICKED,		self.OnMsgOk,						self)
	self:AddCallback("msg_box",     	ui_events.MESSAGE_BOX_CANCEL_CLICKED,	self.OnMsgCancel,					self)
	self:AddCallback("msg_box",     	ui_events.MESSAGE_BOX_YES_CLICKED,		self.OnMsgYes,						self)
	self:AddCallback("msg_box",     	ui_events.MESSAGE_BOX_NO_CLICKED,		self.OnMsgNo,						self)
	self:AddCallback("msg_box",			ui_events.MESSAGE_BOX_QUIT_GAME_CLICKED,self.OnMessageQuitGame,				self)
	self:AddCallback("msg_box",			ui_events.MESSAGE_BOX_QUIT_WIN_CLICKED,	self.OnMessageQuitWin,				self)
end
function main_menu:OnMsgOk()
	self.mbox_mode = 0
end

function main_menu:OnMsgCancel()
	self.mbox_mode = 0
end

function main_menu:OnMsgYes()
	if self.mbox_mode == 1 then
		self:LoadLastSave()
	end
	self.mbox_mode = 0
end

function main_menu:OnMsgNo()
	self.mbox_mode = 0
end

function main_menu:LoadLastSave()
	local console = get_console()
	console:execute("main_menu off")
	console:execute("load_last_save")
end

function main_menu:OnButton_last_save()
	if (alife() == nil) then
		self:LoadLastSave()
		return
	end

	if ((db.actor ~= nil) and (db.actor:alive() == false)) then
		self:LoadLastSave()
		return
	end
	self.mbox_mode = 1
	self.message_box:InitMessageBox("message_box_confirm_load_save")
	self.message_box:ShowDialog(true)
end

function main_menu:OnButton_credits_clicked()
	game.start_tutorial("credits_seq")
end

function main_menu:OnButton_quit_clicked()
	self.message_box:InitMessageBox("message_box_quit_windows")
	self.message_box:ShowDialog(true)
end

function main_menu:OnButton_disconnect_clicked()
	--[[self.message_box:InitMessageBox("message_box_quit_game")
	if (level.game_id() ~= 1) then
		self.message_box:SetText("ui_mm_disconnect_message")	-- MultiPlayer
	else
		self.message_box:SetText("ui_mm_quit_game_message")		-- SinglePlayer
	end
	
	self.message_box:ShowDialog(true)--]]
	
	local console = get_console()
	console:execute("disconnect")
end

function main_menu:OnMessageQuitGame()
	local console = get_console()
	console:execute("disconnect")
end

function main_menu:OnMessageQuitWin()
	local console = get_console()
	console:execute("quit")
end

function main_menu:OnButton_return_game()
	local console = get_console()
	console:execute("main_menu off")
	xr_s.on_main_menu_off()      						--' Distemper 03.2008 --
end

function main_menu:OnButton_new_novice_game()
	local console = get_console()
	console:execute("g_game_difficulty gd_novice")
	self:StartGame()
end

function main_menu:OnButton_new_stalker_game()
	local console = get_console()
	console:execute("g_game_difficulty gd_stalker")
	self:StartGame()
end

function main_menu:OnButton_new_veteran_game()
	local console = get_console()
	console:execute("g_game_difficulty gd_veteran")
	self:StartGame()
end

function main_menu:OnButton_new_master_game()
	local console = get_console()
	console:execute("g_game_difficulty gd_master")
	self:StartGame()
end

function main_menu:StartGame()
	local console = get_console()
	if (alife() ~= nil) then
		console:execute	("disconnect")
	end
	device():pause(false)
	console:execute("start server(all/single/alife/new)")
	console:execute("main_menu off")
end

-- dbg options
function main_menu:OnButton_dbg_options_clicked()
	if not self.debug_options then
		self.debug_options = _s_options.CDebugOptions(self)
	end
	self.debug_options:ShowDialog(true)
	self:HideDialog()
	self:Show(false)
end

function main_menu:OnButton_save_clicked()
	if self.save_dlg == nil then
		self.save_dlg = ui_save_dialog.save_dialog()
		self.save_dlg.owner = self
	end

	self.save_dlg:FillList()
	self.save_dlg:ShowDialog(true)
	self:HideDialog()
	self:Show(false)
end

function main_menu:OnButton_options_clicked()
	if self.opt_dlg == nil then
		self.opt_dlg = ui_mm_opt_main.options_dialog()
		self.opt_dlg.owner = self
	end

	self.opt_dlg:SetCurrentValues()
	self.opt_dlg:ShowDialog(true)
	self:HideDialog()
	self:Show(false)
end

function main_menu:OnButton_load_clicked()
	if self.load_dlg ==nil then
		self.load_dlg = ui_load_dialog.load_dialog()
		self.load_dlg.owner = self
	end

	self.load_dlg:FillList()
	self.load_dlg:ShowDialog(true)
	self:HideDialog()
	self:Show(false)
end

function main_menu:Dispatch(cmd, param)  -- virtual function
	return true
end

function main_menu:OnKeyboard(dik, keyboard_action)  -- virtual function
	CUIScriptWnd.OnKeyboard(self, dik, keyboard_action)
	local bind = dik_to_bind(dik)
	local console = get_console()

	if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
		if dik == DIK_keys.DIK_ESCAPE then
			if IsGameStarted() then
				self.OnButton_return_game() -- xStream 02.2008
			end
		end
		
		if dik == DIK_keys.DIK_F1 then -- спавн меню		
			__cheat_menu.GetCheatDialog():Show()
		end
		
		if dik == DIK_keys.DIK_F2 then -- опции
			self:OnButton_dbg_options_clicked()
		end
		
		if dik == DIK_keys.DIK_F3 then -- редакторы
			self.OnButton_return_game()
			--ui_editors.bool_is_editor_show = true
			--ui_editors.waypoint_editor():ShowDialog(true)
		end
		
		if dik == DIK_keys.DIK_F4 then
			self.OnButton_return_game()
			--ui_editors.bool_is_editor_show = true
			--ui_editors.allspawn_editor():ShowDialog(true)
		end

		if dik == DIK_keys.DIK_Q then
			self:OnMessageQuitWin()
		end
	end
	return true
end